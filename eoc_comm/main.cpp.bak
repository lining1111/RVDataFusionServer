/*
 */
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/ioctl.h>
#include <net/if.h>
#include <netinet/in.h>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <ifaddrs.h>

#include <arpa/inet.h>
#include <time.h>
#include <sys/time.h>


#include "yyls_eoc_comm.hpp"
#include "sqlite_eoc_db.h"
#include "configure_eoc_init.h"
#include "dns_server.h"

#include "logger.h"

using namespace std;

//ceshi
extern vector<EOC_Camera_Info> g_eoc_camera_info;
extern EOC_Radar_Info g_eoc_radar_info;

int main(int argc, char *argv[])
{
    int ret = 0;
    DBG("main start");
    dns_server_start();  /*dns服务*/

    if(g_eoc_config_init()<0)
    {
        ERR("g_eoc_config_init err");
        return -1;
    }
    eoc_communication_start("10.100.32.128", 6524);
//    eoc_communication_start("10.100.32.147", 6524);

    int test_i = 0;
    time_t now_t = time(NULL);
    while(1)
    {
        now_t = time(NULL);
    //    if(test_i%2 == 0)
        {
            UP_EOC_CameraState camera_data;
            for(unsigned int camera_i=0; camera_i<g_eoc_camera_info.size(); camera_i++)
            {
                    camera_data.Guid = g_eoc_camera_info[camera_i].Guid;
                    camera_data.State = 0;
                    camera_data.Model = "X110";
                    camera_data.SoftVersion = "abcabcabc";
                    camera_data.DataVersion = "";
                    camera_data.GetPicTotalCount = 60;
                    camera_data.GetPicSuccessCount = 60;
                    update_camera_state(camera_data);
                    DBG("----------update_camera_state");
                    test_i ++;
            }
            
            update_radar_state(g_eoc_radar_info.Guid, now_t%2, "radartest00001v");
        }
        
        sleep(119);
    }
    return 0;
}



