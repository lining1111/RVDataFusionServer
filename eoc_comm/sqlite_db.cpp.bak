
#include <stdio.h>
#include <string>
#include <vector>
#include <sstream>
#include <stdint.h>

#include "logger.h"
//#include "utility.h"
#include "sqlite_api.h"
#include "sqlite_db.h"
//#include "proj_config.h"
#include "db_tool.hpp"

typedef struct Database_t{
    pthread_mutex_t db_mutex;
    char db_file_path[256];
    char db_version[32];
}Database;
#define HOME_PATH "/home/nvidianx"

Database roadeside_parking_db = {PTHREAD_MUTEX_INITIALIZER, "./etc/RoadsideParking.db", "V1_20"}; //1_20对应EOC通信协议1.3.36,添加视频桩相关配置
//Database roadeside_parking_db = {PTHREAD_MUTEX_INITIALIZER, HOME_PATH"/run-test/RoadsideParking.db", "V1_14"}; //1_14对应EOC通信协议1.3.29
Database cl_parking_db =        {PTHREAD_MUTEX_INITIALIZER, HOME_PATH"/bin/CLParking.db", "V1_0"};
Database factory_parking_db =        {PTHREAD_MUTEX_INITIALIZER, HOME_PATH"/bin/RoadsideParking.db", "V1_0"};

/****表字段配置******/
typedef struct
{
    char column_name[64];
    char data_type[64];
}DB_Table_Configure;
//最初设置非空属性的字段不检测，仅检测后期添加字段
DB_Table_Configure TB_Camera_table[] = {{"CameraArrayName", "TEXT"},
                                        {"Message",         "TEXT"},
                                        {"MatrixSubCode",   "TEXT"},
                                        {"CameraArrayGuid", "TEXT"},
                                        {"TriggerMode", "INTEGER"},
                                        {"DecodeType", "INTEGER"},
                                        {"EquipmentType", "INTEGER"}};

DB_Table_Configure TB_ParkingArea_table[] = {{"ParkingAreaID",	"TEXT"},
											{"Is4GModel",	"INTEGER"},
											{"NoEventImageUploadInterval",	"INTEGER"},
											{"MonitorImageUploadInterval",	"INTEGER"},
											{"PlateDefault",	"TEXT"},
											{"IsBlueDifference",	"INTEGER"},
											{"DayPixelDifferenceTreshold",	"INTEGER"},
											{"DayFrequencyDomainTreshold",	"INTEGER"},
											{"NightPixelDifferenceTreshold",	"INTEGER"},
											{"NightFrequencyDomainTreshold",	"INTEGER"},
											{"FrameInterval",	"INTEGER"},
											{"PlateRectOffset",	"INTEGER"},
											{"PlateWidthMultiples",	"INTEGER"},
											{"PlateHeightMultiples",	"INTEGER"},
											{"GaussianBlurRadius",	"INTEGER"},
											{"PixelDifferenceRange",	"INTEGER"},
											{"Message",	"TEXT"},
											{"ReceivePicControl", "INTEGER"},
											{"DelayedReportingParameter", "TEXT"},
                                            {"IsIllegalParkingCheck", "INTEGER"},
                                            {"IsPrintPklName", "INTEGER"},
                                            {"City", "TEXT"},
                                            {"InspectionWay", "INTEGER"},
                                            {"InParkingScanCount", "INTEGER"},
                                            {"IllegalParkingBallManufacturer", "INTEGER"},
                                            {"Resolution", "INTEGER"},
                                            {"BitRateType", "INTEGER"},
                                            {"BitRateUpperLimit", "INTEGER"},
                                            {"VideoFrameRate", "INTEGER"},
                                            {"SnapshotAreaCloseUpPictureCount", "INTEGER"},
                                            {"SnapshotPanoramaPictureCount", "INTEGER"},
                                            {"SnapshotVehicleCloseUpPictureCount", "INTEGER"},
                                            {"FirstSecondIntervalTime", "INTEGER"},
                                            {"SecondPanoramaIntervalTime", "INTEGER"},
                                            {"NightFrontBackSwitch", "INTEGER"},
                                            {"UploadNoPlateSwitch", "INTEGER"},
                                            {"UploadFilterDataSwitch", "INTEGER"},
                                            {"UploadAlarmSwitch", "INTEGER"},
                                            {"ParkingSpaceOutsideIllegalParking", "INTEGER"},
                                            {"ParkingSpaceInsideIllegalParking", "INTEGER"},
                                            {"MicroCheckPoint", "INTEGER"},
                                            {"TimeLimitParking", "INTEGER"},
                                            {"ShortVideoSwitch", "INTEGER"},
                                            {"AlarmLevel", "INTEGER"}};

DB_Table_Configure TB_ParkingLot_table[] = {{"BlueBrainInterfacePath",	"TEXT"},
											{"BlueBrainInterfacePort",	"INTEGER"},
											{"BlueBrainPicPath",	"TEXT"},
											{"BlueBrainPicPort",	"INTEGER"},
											{"SpaceExcpUploadPath",	"TEXT"},
											{"CarFilterServicesPath",	"TEXT"},
											{"CarFilterServicesPort",	"INTEGER"},
											{"MainDNS", "TEXT"},
											{"AlternateDNS", "TEXT"},
											{"BlueBrainInterfacePath", "TEXT"},
											{"BlueBrainInterfacePort", "TEXT"},
											{"BlueBrainPicPath", "TEXT"},
											{"BlueBrainPicPort", "TEXT"},
											{"SpaceExcpUploadPath", "TEXT"},
											{"IllegalParkingPlatformPath", "TEXT"},
											{"FlowStateQueryPath", "TEXT"}};

DB_Table_Configure TB_ParkingSpace_table[] = {{"BigAreaGuid",   "TEXT"},
                                                {"SmallAreaGuid",   "TEXT"},
                                                {"DiffAreaGuid",    "TEXT"},
                                                {"RecallAreaGuid",  "TEXT"},
                                                {"PlateArea1Guid",  "TEXT"},
                                                {"PlateArea2Guid",  "TEXT"},
                                                {"VehicleAreaGuid", "TEXT"},
                                                {"PlateVisible",    "INTEGER"},
                                                {"SpaceTiltDirection",  "INTEGER"},
                                                {"LightInfluence",  "INTEGER"},
                                                {"SpaceInCameras",  "INTEGER"},
                                                {"DynamicDecision", "INTEGER"},
                                                {"PanoramaCameraGuid", "TEXT"},
                                                {"Type", "INTEGER"},
                                                {"IsEnable", "INTEGER"}};

DB_Table_Configure TB_RecognitionArea_table[] = {{"RotateAngle",	"INTEGER"}};

//typedef struct{
//	string Guid;		//规则GUID
//	string PkRuleVersion;		//停车规则数据版本
//	string Name;		//规则名称
//
//	string StartDate;	//生效开始时间yyyyMMddHHmmss
//	string EndDate;	//生效结束时间yyyyMMddHHmmss
//	int LeadTimes;		//提前结束上报时长
//	int CycleType;		//周期类型1:每天,2:周一至周五,3:周末,4:自定义;
//	string CycleDetail;	//周期详情 2,3,4,5,6,7,1 分别对应周一到周日和java日期类枚举对应。多个用，分割; 示例:"CycleDetail": "2,6,4"
//	string PkRuleDurations;	//停车规则管理时段（json数组）
//
//	int SpecialDurationOperate;	//非管理时段操作 1. 抓拍、2. 不抓拍
//	int BlueBrainConfidence;	//蓝脑置信度
//	string PkRuleSpecialDurations;			//非管理日期yyyyMMdd（json数组）
//	string PkRuleSpaces;				//涉及的泊位（json数组）
//}tb_parking_rule_t;
static DBT_Table parking_rule_table[] = {
	{"parking_rule", "Guid", "TEXT"},		//规则GUID
	{"parking_rule", "PkRuleVersion", "TEXT"},	//停车规则数据版本
	{"parking_rule", "Name", "TEXT"},		//规则名称

	{"parking_rule", "StartDate", "TEXT"},	//生效开始时间yyyyMMddHHmmss
	{"parking_rule", "EndDate", "TEXT"},	//生效结束时间yyyyMMddHHmmss
	{"parking_rule", "LeadTimes", "INTERGE"},	//提前结束上报时长

	{"parking_rule", "CycleType", "INTERGE"},	//周期类型1:每天,2:周一至周五,3:周末,4:自定义;
	{"parking_rule", "CycleDetail", "TEXT"},	//周期详情 2,3,4,5,6,7,1 分别对应周一到周日和java日期类枚举对应。多个用，分割; 示例:"CycleDetail": "2,6,4"
	{"parking_rule", "PkRuleDurations", "TEXT"},	//停车规则管理时段（json数组）

	{"parking_rule", "SpecialDurationOperate", "INTERGE"},//非管理时段操作 1. 抓拍、2. 不抓拍
	{"parking_rule", "BlueBrainConfidence", "INTERGE"},//蓝脑置信度
	{"parking_rule", "PkRuleSpecialDurations", "TEXT"},	//非管理日期yyyyMMdd（json数组）
	{"parking_rule", "PkRuleSpaces", "TEXT"}};	//涉及的泊位（json数组）

//
//typedef struct{
//	string Guid;		//规则GUID
//	string IllegalRuleVersion;		//停车规则数据版本
//	string Name;		//规则名称
//
//	string StartDate;	//生效开始时间yyyyMMddHHmmss
//	string EndDate;	//生效结束时间yyyyMMddHHmmss
//	string IllegalPkRuleCycles;	//停车规则管理时段（json数组）
//
//	int IsEnablePriority;
//	string PriorityStartDate;	//优先执行生效开始时间yyyyMMddHHmmss
//	string PriorityEndDate;		//优先执行生效结束时间yyyyMMddHHmmss
//	string IllegalPkRulePriorityDurations;	//优先执行停车规则管理时段（json数组）
//
//	int SpecialDurationOperate;	//非管理时段操作 1. 抓拍、2. 不抓拍
//	string PkRuleSpaces;				//涉及的泊位（json数组）
//}tb_illegal_parking_rule_t;
static DBT_Table illegal_parking_rule_table[] = {
	{"illegal_parking_rule", "Guid", "TEXT"},
	{"illegal_parking_rule", "IllegalRuleVersion", "TEXT"},
	{"illegal_parking_rule", "Name", "TEXT"},

	{"illegal_parking_rule", "StartDate", "TEXT"},
	{"illegal_parking_rule", "EndDate", "TEXT"},
	{"illegal_parking_rule", "IllegalPkRuleCycles", "TEXT"},//停车规则管理时段包括周期类型（json数组）

	{"illegal_parking_rule", "IsEnablePriority", "INTERGE"},
	{"illegal_parking_rule", "PriorityStartDate", "TEXT"},
	{"illegal_parking_rule", "PriorityEndDate", "TEXT"},
	{"illegal_parking_rule", "IllegalPkRulePriorityDurations", "TEXT"},//停车规则管理时段（json数组）

	{"illegal_parking_rule", "SpecialDurationOperate", "INTERGE"},
	{"illegal_parking_rule", "IllegalPkRuleSpaces", "TEXT"}};	//涉及的泊位（数组）

static DBT_Table detection_relevancy_table[] = {
	{"detection_relevancy", "SpaceGuid", "TEXT"},
	{"detection_relevancy", "SpaceName", "TEXT"},
	{"detection_relevancy", "SpaceType", "INTERGE"},

	{"detection_relevancy", "DestSpaceGuid", "TEXT"},
	{"detection_relevancy", "DestSpaceName", "TEXT"},
	{"detection_relevancy", "DestSpaceType", "INTERGE"},
	{"detection_relevancy", "DestSpacePlatid", "TEXT"},
	{"detection_relevancy", "DestPklPlatId", "TEXT"},
	{"detection_relevancy", "DestEquipmentName", "TEXT"}};

//违停基础配置
static DBT_Table illegal_parking_set_table[] = {
	{"illegal_parking_set", "WtIs4GTransmission", "INTERGE"},
	{"illegal_parking_set", "WtOutIsTestDate", "INTERGE"},
	{"illegal_parking_set", "WtOutDelayUploadTime", "INTERGE"},
	{"illegal_parking_set", "WtOutCloseUpPic", "TEXT"},
	{"illegal_parking_set", "WtInIsParking", "INTERGE"},
	{"illegal_parking_set", "WtInIsBlueBrain", "INTERGE"},
	{"illegal_parking_set", "WtInIsParkingInSmallVideo", "INTERGE"},
	{"illegal_parking_set", "WtInIsParkingInGif", "INTERGE"},
	{"illegal_parking_set", "WtInIsParkingOutSmallVideo", "INTERGE"},
	{"illegal_parking_set", "WtInIsParkingOutGif", "INTERGE"},
	{"illegal_parking_set", "WtInIsSpaceInspectionPic", "INTERGE"},
	{"illegal_parking_set", "WtInInspectionWay", "INTERGE"},
	{"illegal_parking_set", "WtInEventInterval", "INTERGE"},
	{"illegal_parking_set", "WtInNoEventInterval", "INTERGE"},
	{"illegal_parking_set", "WtInIsInPanoramaspectionPic", "INTERGE"},
	{"illegal_parking_set", "WtInPanoramaspectionPicInterval", "INTERGE"},
	{"illegal_parking_set", "WtInNonStandardBehaviorReverse", "INTERGE"},
	{"illegal_parking_set", "WtInNonStandardBehaviorCrossSpace", "INTERGE"},
	{"illegal_parking_set", "WtInNonStandardBehaviorLinePressing", "INTERGE"},
	{"illegal_parking_set", "WtInNoLicensePlateDefault", "TEXT"},
	{"illegal_parking_set", "WtInIsPrintParkinglotName", "INTERGE"},
	{"illegal_parking_set", "WtInAllowParkingTime", "INTERGE"},
	{"illegal_parking_set", "WtInSoonOverTimeEarlyWarning", "INTERGE"},
	{"illegal_parking_set", "WtInOverTimeRemind", "INTERGE"},
	{"illegal_parking_set", "WtInIsWtEvidence", "INTERGE"},
	{"illegal_parking_set", "WtInCloseUpPic", "TEXT"},
	{"illegal_parking_set", "WtInIsLicensePlateShieldedUploadVideo", "INTERGE"},
	{"illegal_parking_set", "WtInIsIllegalParkingInSmallVideo", "INTERGE"},
	{"illegal_parking_set", "WtInIsIllegalParkingOutSmallVideo", "INTERGE"}};


int check_table_column(string tab_name, DB_Table_Configure tab_column[], int check_num)
{
	int rtn = 0;
	char sqlstr[1024] = {0};
	char **sqldata;
	int nrow = 0;
	int ncol = 0;
	int icol = 0;

	for(icol=0; icol<check_num; icol++)
	{
		nrow = 2;
		ncol = 0;
		memset(sqlstr, 0x0, 1024);
		sprintf(sqlstr, "select * from sqlite_master where name='%s' and sql like '%%%s%%';", 
						tab_name.c_str(), tab_column[icol].column_name);
		rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
	    if (rtn < 0)
	    {
	        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
	        return -1;
	    }
		if(nrow == 0)
		{
			//添加字段
			memset(sqlstr, 0x0, 1024);
			sprintf(sqlstr, "alter table %s add %s %s", tab_name.c_str(), tab_column[icol].column_name, tab_column[icol].data_type);
			rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
			if(rtn < 0)
			{
				DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
			//	return -1;
			}
			else
			{
				DBG("add column OK! sql:%s", sqlstr);
			}
		}
		
		sqlite3_free_table_safe(sqldata);
	}

	return 0;
}
/*
 * 如果表不存在则创建表
 *
 * 0：成功
 * -1：失败
 * */
int db_table_init_if_not_exists()
{
    int rtn;
    DBG("using database file is:%s[%s] %s[%s] %s[%s]", roadeside_parking_db.db_file_path,
            roadeside_parking_db.db_version,
            cl_parking_db.db_file_path, cl_parking_db.db_version, factory_parking_db.db_file_path, factory_parking_db.db_version);

    rtn = dbt_mkdir_from_path(roadeside_parking_db.db_file_path);
    if(rtn != 0){
    	ERR("%s dbt_mkdir_from_path:%s Err", __FUNCTION__, roadeside_parking_db.db_file_path);
    }

    int count = 1;
    char *sqlstr = NULL;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    char cur_db_version[16] = {0};
    memset(cur_db_version, 0x0, 16);

    sqlstr = (char *)malloc(2048);
    if (sqlstr == NULL)
    {
        ERR("申请内存错误");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    sprintf(sqlstr, "select tbl_name from sqlite_master where type='table'");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    for(int i=0; i<nrow; i++)
    {       
        if(strstr(sqldata[i+1], "V1_"))
        {
            strcpy(cur_db_version, sqldata[i+1]);
            if(strcmp(cur_db_version, roadeside_parking_db.db_version) == 0){
                count = 0;
            }
            break;
        }
    }
    sqlite3_free_table_safe(sqldata);

    if(count != 0)
    {
        DBG("check db_version(%s) from %s failed", roadeside_parking_db.db_version, roadeside_parking_db.db_file_path);
        
        //判断表是否存在创建表，并检查补充字段

        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS conf_version("
            "id INTEGER PRIMARY KEY NOT NULL,"
            "version TEXT NOT NULL,"
            "time       TEXT NOT NULL)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
        //删除数据版本,登录成功后会主动要一次配置
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"delete from conf_version");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }

        memset(sqlstr, 0x0, 2048);
        snprintf(sqlstr,2048,"create table IF NOT EXISTS TB_Camera("
                "ID INTEGER PRIMARY KEY NOT NULL,"
                "Guid   TEXT NOT NULL,"
                "ParkingAreaGuid    TEXT NOT NULL,"
                "CameraName TEXT NOT NULL,"
                "CameraIP   TEXT NOT NULL,"
                "CameraType INTEGER NOT NULL,"
                "CameraDirection    INTEGER NOT NULL,"
                "Username   TEXT NOT NULL,"
                "Password   TEXT,"
                "Port   INTEGER NOT NULL,"
                "IsEnable   INTEGER NOT NULL,"
                "CameraArrayName    TEXT,"
                "MatrixSubCode    TEXT,"
                "Message    TEXT)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
        check_table_column("TB_Camera", TB_Camera_table, (sizeof(TB_Camera_table)/sizeof(DB_Table_Configure)));

        memset(sqlstr, 0x0, 2048);
        snprintf(sqlstr,2048,"create table IF NOT EXISTS TB_ParkingArea("
                "ID INTEGER PRIMARY KEY NOT NULL,"
                "Guid TEXT NOT NULL,"
                "ParkingAreaName TEXT NOT NULL,"
                "ParkingAreaIP TEXT NOT NULL,"
                "ParkingAreaType INTEGER NOT NULL,"
                "ParkingLotGuid TEXT NOT NULL,"
                "InParkingCount INTEGER NOT NULL,"
                "OutParkingCount INTEGER NOT NULL,"
                "InParkingMatchCount INTEGER NOT NULL,"
                "OutParkingMatchCount INTEGER NOT NULL,"
                "NightStartTime INTEGER NOT NULL,"
                "NightEndTime INTEGER NOT NULL,"
                "NightSuperimposeCount INTEGER NOT NULL,"
                "PanoramicPicStart INTEGER NOT NULL,"
                "PanoramicPicEnd INTEGER NOT NULL,"
                "ParkingAreaID TEXT,"
                "Is4GModel INTEGER,"
                "NoEventImageUploadInterval INTEGER,"
                "MonitorImageUploadInterval INTEGER,"
                "PlateDefault TEXT,"
                "IsBlueDifference INTEGER,"
                "DayPixelDifferenceTreshold INTEGER,"
                "DayFrequencyDomainTreshold INTEGER,"
                "NightPixelDifferenceTreshold INTEGER,"
                "NightFrequencyDomainTreshold INTEGER,"
                "FrameInterval INTEGER,"
                "PlateRectOffset INTEGER,"
                "PlateWidthMultiples INTEGER,"
                "PlateHeightMultiples INTEGER,"
                "GaussianBlurRadius INTEGER,"
                "PixelDifferenceRange INTEGER,"
                "PixelDifferenceTreshold INTEGER,"
                "Message TEXT,"
                "ReceivePicControl INTEGER,"
                "DelayedReportingParameter TEXT,"
                "IsIllegalParkingCheck INTEGER,"
                "IsPrintPklName INTEGER)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
        memset(sqlstr, 0x0, 256);
        snprintf(sqlstr,2048,"alter table TB_ParkingArea add PixelDifferenceTreshold INTEGER");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        check_table_column("TB_ParkingArea", TB_ParkingArea_table, (sizeof(TB_ParkingArea_table)/sizeof(DB_Table_Configure)));

        memset(sqlstr, 0x0, 2048);
        snprintf(sqlstr,2048,"create table IF NOT EXISTS TB_ParkingLot("
                "ID                     INTEGER PRIMARY KEY NOT NULL,"
                "Guid                   TEXT NOT NULL,"
                "ParkingLotID           TEXT NOT NULL,"
                "ParkingLotName         TEXT NOT NULL,"
                "CloudServerPath        TEXT NOT NULL,"
                "TransferServicePath    TEXT NOT NULL,"
                "FilterList             TEXT,"
                "ReplaceList            TEXT,"
                "IsUploadCloud          INTEGER NOT NULL,"
                "RecUplodPath           TEXT,"

                "MonImageUplodPath      TEXT,"
                "EquStateUplodPath      TEXT,"
                "EquAlertUplodPath      TEXT,"
                "CloudServerPort        INTEGER NOT NULL,"
                "FileServicePort        INTEGER NOT NULL,"

                "BlueBrainInterfacePath     TEXT,"
                "BlueBrainInterfacePort     INTEGER,"
                "BlueBrainPicPath           TEXT,"
                "BlueBrainPicPort           INTEGER,"
                "SpaceExcpUploadPath        TEXT,"
                "CarFilterServicesPath      TEXT,"
                "CarFilterServicesPort      INTEGER,"
                "MainDNS  TEXT,"
                "AlternateDNS  TEXT,"
                "IllegalParkingPlatformPath    TEXT,"
                "FlowStateQueryPath    TEXT)");

        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
        check_table_column("TB_ParkingLot", TB_ParkingLot_table, (sizeof(TB_ParkingLot_table)/sizeof(DB_Table_Configure)));
        
        memset(sqlstr, 0x0, 2048);
        snprintf(sqlstr,2048,"create table IF NOT EXISTS TB_ParkingSpace("
                "ID                 INTEGER PRIMARY KEY NOT NULL,"
                "Guid               TEXT NOT NULL,"
                "ParkingSpaceID     TEXT NOT NULL,"
                "ParkingSpaceName   TEXT NOT NULL,"
                "ParkingAreaGuid    TEXT NOT NULL,"

                "CameraGuid         TEXT NOT NULL,"
                
                "PanoramaCameraGuid TEXT,"
                "BigAreaGuid        TEXT,"
                "SmallAreaGuid      TEXT,"
                "DiffAreaGuid       TEXT,"
                "RecallAreaGuid     TEXT,"
                "PlateArea1Guid     TEXT,"
                "PlateArea2Guid     TEXT,"
                "VehicleAreaGuid    TEXT,"

                "PlateVisible           INTEGER,"
                "SpaceTiltDirection     INTEGER,"
                "LightInfluence         INTEGER,"
                "SpaceInCameras         INTEGER,"
                "DynamicDecision        INTEGER,"
                "Type        INTEGER)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
        check_table_column("TB_ParkingSpace", TB_ParkingSpace_table, (sizeof(TB_ParkingSpace_table)/sizeof(DB_Table_Configure)));

		memset(sqlstr, 0x0, 2048);
		snprintf(sqlstr,2048,"create table IF NOT EXISTS TB_RecognitionArea("
	            "ID             INTEGER PRIMARY KEY NOT NULL,"
	            "Guid           TEXT NOT NULL,"
	            "StartX         INTEGER NOT NULL,"
	            "StartY         INTEGER NOT NULL,"
	            "AreaWidth      INTEGER NOT NULL,"
	            "AreaHeight     INTEGER NOT NULL,"
	            "StretchWidth   INTEGER NOT NULL,"
	            "StretchHeight  INTEGER NOT NULL,"
	            "TiltWidth      INTEGER NOT NULL,"
	            "TiltHeight     INTEGER NOT NULL,"

                "RotateAngle    INTEGER,"
                "RotateRange    INTEGER,"
                "RotateStep     INTEGER)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
        check_table_column("TB_RecognitionArea", TB_RecognitionArea_table, (sizeof(TB_RecognitionArea_table)/sizeof(DB_Table_Configure)));
        //识别线表
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS TB_RecognitionLine("
                "ID                 INTEGER PRIMARY KEY NOT NULL,"
                "Guid               TEXT NOT NULL,"
                "ParkingAreaGuid    TEXT NOT NULL,"
                "ParkingSpaceGuid   TEXT NOT NULL,"
                "RecognitionLineType    INTEGER NOT NULL,"
                "StartX             INTEGER NOT NULL,"
                "StartY             INTEGER NOT NULL,"
                "EndX               INTEGER NOT NULL,"
                "EndY               INTEGER NOT NULL)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
        //识别点表
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS TB_RecognitionPoint("
                "ID                 INTEGER PRIMARY KEY NOT NULL,"
                "Guid               TEXT NOT NULL,"
                "ParkingAreaGuid    TEXT NOT NULL,"
                "ParkingSpaceGuid   TEXT NOT NULL,"
                "RecognitionPointType   INTEGER NOT NULL,"
                "PointX             INTEGER NOT NULL,"
                "PointY             INTEGER NOT NULL)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
		//多边形识别区
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS TB_RecognitionPolygon("
                "ID                 INTEGER PRIMARY KEY NOT NULL,"
                "Guid               TEXT NOT NULL,"
                "ParkingAreaGuid    TEXT,"
                "ParkingSpaceGuid   TEXT NOT NULL,"
                "RecognitionPolygonType   INTEGER NOT NULL,"
                "Points             TEXT NOT NULL)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
		//相机矩阵
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS TB_CameraArray("
                "ID      INTEGER PRIMARY KEY NOT NULL,"
                "Guid    TEXT NOT NULL,"
                "Name    TEXT,"
                "Type    INTEGER,"
                "ModelNumber  INTEGER)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
		//矩阵控制器
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS TB_CameraController("
                "ID      INTEGER PRIMARY KEY NOT NULL,"
                "Guid    TEXT NOT NULL,"
                "Name    TEXT,"
                "IP      TEXT,"
                "Type    INTEGER,"
                "CameraArrayGuid  TEXT)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
		//Nvr
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS TB_Nvr("
                "ID      INTEGER PRIMARY KEY NOT NULL,"
                "Guid    TEXT NOT NULL,"
                "NvrIP    TEXT NOT NULL,"
                "NvrName  TEXT,"
                "Username  TEXT,"
                "Password  TEXT,"
                "MapAddress  TEXT,"
                "MapPort    INTEGER)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
		memset(sqlstr, 0x0, 1024);
		snprintf(sqlstr,1024,"create table IF NOT EXISTS TB_NvrCamera("
				"ID 	 INTEGER PRIMARY KEY NOT NULL,"
				"CameraGuid	 TEXT NOT NULL,"
				"CameraIP	 TEXT NOT NULL,"
				"NvrGuid  TEXT NOT NULL)");
		rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
		if(rtn < 0)
		{
			DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
			free(sqlstr);
			return -1;
		}
		//视频桩
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS VideoPole("
                "ID      INTEGER PRIMARY KEY NOT NULL,"
                "Guid    TEXT NOT NULL,"
                "Name    TEXT,"
                "PlatID  TEXT)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }

        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS configure("
                "ID             INTEGER PRIMARY KEY NOT NULL,"
                "ConfigureName  TEXT NOT NULL,"
                "ConfigureValue TEXT)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }

        //系统配置表
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"create table IF NOT EXISTS etc_config("
                "id INTEGER PRIMARY KEY NOT NULL,"
        		"kgroup TEXT NOT NULL,"
        		"key TEXT NOT NULL,"
                "value TEXT NOT NULL)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }

        //更新为新版本数据库版本表
        memset(sqlstr, 0x0, 1024);
        if(cur_db_version[0] == 0x0){
            snprintf(sqlstr,1024,"create table IF NOT EXISTS %s(id INTEGER PRIMARY KEY NOT NULL)",roadeside_parking_db.db_version);
        }else{
            snprintf(sqlstr,1024,"alter table %s rename to %s", cur_db_version, roadeside_parking_db.db_version);
        }
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
    }
    else
    {
        DBG("check db_version(%s) from %s succeed", roadeside_parking_db.db_version, roadeside_parking_db.db_file_path);
    }
    free(sqlstr);
    return 0;
}

/*
 * 如果表内科研云登陆地址不存在则添加默认地址
 *
 * 0：成功
 * -1：失败
 * */
int db_conf_init_if_not_exists()
{
    int rtn = 0;
    int count = 0;
    char *sqlstr = NULL;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存错误");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    sprintf(sqlstr, "select count(*) from TB_ParkingLot");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    if(nrow == 1)
    {
        count = atoi(sqldata[1]? sqldata[1]: "NULL");
    }
    else
    {
        DBG("db_version tabal select count err\n");
    }
    sqlite3_free_table_safe(sqldata);

    if(count < 1)
    {
/*      char CloudServerPath[] = "pre.aps.aipark.com";
        char TransferServicePath[] = "fs.aps.aipark.com";
        int CloudServerPort = 6226;
        int FileServicePort = 7100;

        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"insert into TB_ParkingLot(Guid,ParkingLotID,ParkingLotName,"
                "CloudServerPath,TransferServicePath,IsUploadCloud,CloudServerPort,"
                "FileServicePort) values('', '', '','%s','%s',0,%d,%d)", 
                CloudServerPath, TransferServicePath, CloudServerPort, FileServicePort);
*/
        memset(sqlstr, 0x0, 1024);
        snprintf(sqlstr,1024,"insert into TB_ParkingLot(Guid,ParkingLotID,ParkingLotName,"
                "CloudServerPath,TransferServicePath,IsUploadCloud,CloudServerPort,"
                "FileServicePort) values('', '', '','','',0,0,0)");
        rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
        if(rtn < 0)
        {
            DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
            free(sqlstr);
            return -1;
        }
    }
    free(sqlstr);
    return 0;
}

/*
 * 获取TB_ParkngLot的数据（取最小id一条记录）
 *
 * 0：成功
 * -1：失败
 * */
int db_parking_lot_get_data(DB_ParkingLot_Data& data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    sprintf(sqlstr, "select ID, Guid, ParkingLotID, ParkingLotName, CloudServerPath, "
                "TransferServicePath, FilterList, ReplaceList, IsUploadCloud, RecUplodPath, "
                "MonImageUplodPath, EquStateUplodPath, EquAlertUplodPath, CloudServerPort, "
                "FileServicePort, BlueBrainInterfacePath, BlueBrainInterfacePort, "
                "BlueBrainPicPath, BlueBrainPicPort, SpaceExcpUploadPath, "
                "CarFilterServicesPath, CarFilterServicesPort, "
                "MainDNS, AlternateDNS, IllegalParkingPlatformPath, FlowStateQueryPath "
                "from TB_ParkingLot where ID=(select MIN(ID) from TB_ParkingLot)");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    if(nrow == 1)
    {
        data.ID = atoi(sqldata[ncol+0]? sqldata[ncol+0]: "NULL");
        data.Guid = sqldata[ncol+1]? sqldata[ncol+1]: "NULL";
        data.ParkingLotID = sqldata[ncol+2]? sqldata[ncol+2]: "NULL";
        data.ParkingLotName = sqldata[ncol+3]? sqldata[ncol+3]: "NULL";
        data.CloudServerPath = sqldata[ncol+4]? sqldata[ncol+4]: "NULL";
        data.TransferServicePath = sqldata[ncol+5]? sqldata[ncol+5]: "NULL";
        data.FilterList = sqldata[ncol+6]? sqldata[ncol+6]: "NULL";
        data.ReplaceList = sqldata[ncol+7]? sqldata[ncol+7]: "NULL";
        data.IsUploadCloud = atoi(sqldata[ncol+8]? sqldata[ncol+8]: "NULL");
        data.RecUplodPath = sqldata[ncol+9]? sqldata[ncol+9]: "NULL";
        data.MonImageUplodPath = sqldata[ncol+10]? sqldata[ncol+10]: "NULL";
        data.EquStateUplodPath = sqldata[ncol+11]? sqldata[ncol+11]: "NULL";
        data.EquAlertUplodPath = sqldata[ncol+12]? sqldata[ncol+12]: "NULL";
        data.CloudServerPort = atoi(sqldata[ncol+13]? sqldata[ncol+13]: "NULL");
        data.FileServicePort = atoi(sqldata[ncol+14]? sqldata[ncol+14]: "NULL");
        data.BlueBrainInterfacePath = sqldata[ncol+15]? sqldata[ncol+15]: "NULL";
        data.BlueBrainInterfacePort = atoi(sqldata[ncol+16]? sqldata[ncol+16]: "NULL");
        data.BlueBrainPicPath = sqldata[ncol+17]? sqldata[ncol+17]: "NULL";
        data.BlueBrainPicPort = atoi(sqldata[ncol+18]? sqldata[ncol+18]: "NULL");
        data.SpaceExcpUploadPath = sqldata[ncol+19]? sqldata[ncol+19]: "NULL";
        data.CarFilterServicesPath = sqldata[ncol+20]? sqldata[ncol+20]: "NULL";
        data.CarFilterServicesPort = atoi(sqldata[ncol+21]? sqldata[ncol+21]: "NULL");
        data.MainDNS = sqldata[ncol+22]? sqldata[ncol+22]: "NULL";
        data.AlternateDNS = sqldata[ncol+23]? sqldata[ncol+23]: "NULL";
        data.IllegalParkingPlatformPath = sqldata[ncol+24]? sqldata[ncol+24]: "NULL";
        data.FlowStateQueryPath = sqldata[ncol+25]? sqldata[ncol+25]: "NULL";
    }
    else
    {
        DBG("TB_ParkingLot tabal date count err\n");
        sqlite3_free_table_safe(sqldata);
        free(sqlstr);
        return 1;
    }
    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return rtn;
}

/*
 * 获取是否上传标志
 * flag：
 *  0：不上传
 *  1：上传
 *
 * 0：成功
 * -1：失败
 * */
int db_get_upload_flag(int &flag)
{
    DB_ParkingLot_Data data;
    int ret = db_parking_lot_get_data(data);
    if(ret == 0){
        flag = data.IsUploadCloud;
    }else{
        flag = 0;
    }
    return ret;
}

/*
 * 获取违停流水是否上传标志
 * flag：
 *  0：不上传
 *  1：上传
 *
 * 0：成功
 * -1：失败
 * */
int db_get_illegal_upload_flag(int &flag)
{
    int ret = -1;
    DB_ParkingArea_Data data;
    ret = db_parking_area_get_data(data);
    if (ret == 0) {
        flag = data.IsIllegalParkingCheck;
    }
    return ret;    
}


/*
 * 更新TB_ParkngLot部分数据（直接更新id最小一条数据）
 *
 * 0：成功
 * -1：失败
 * */
int db_parking_lot_set_part1(DB_ParkingLot_Data& data)
{
    int rtn = 0;
    //char sqlstr[1024] = {0};
    char *sqlstr;
    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);
    snprintf(sqlstr,1024,"update TB_ParkingLot set Guid='%s',ParkingLotID='%s',"
            "ParkingLotName='%s',FilterList='%s',ReplaceList='%s',IsUploadCloud=%d "
            "where ID=(select MIN(ID) from TB_ParkingLot)", 
            data.Guid.c_str(), data.ParkingLotID.c_str(), data.ParkingLotName.c_str(), data.FilterList.c_str(),
            data.ReplaceList.c_str(), data.IsUploadCloud);
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }
    free(sqlstr);
    return 0;
}
/*
 * 更新TB_ParkngLot某一字段值
 *
 * 0：成功
 * -1：失败
 * */
int db_parking_lot_set_int(string column_name, int column_value)
{
    int rtn = 0;
    char *sqlstr;

    if(column_value <= 0)
    {
        return 1;
    }

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);
    snprintf(sqlstr,256,"update TB_ParkingLot set %s=%d", column_name.c_str(), column_value);
            
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;   
}


/*
 * 更新TB_ParkngLot某一服务地址
 *
 * 0：成功
 * -1：失败
 * */
int db_parking_lot_set_string(string sevice_name, string sevice_path)
{
    int rtn = 0;
    char *sqlstr;

    if(sevice_path == "")
    {
        return 1;
    }
    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);
    snprintf(sqlstr,1024,"update TB_ParkingLot set %s='%s'", sevice_name.c_str(), sevice_path.c_str());
            
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;
}

/***取id最大一条数据的用户名***/
int db_factory_get_uname(string &uname)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

	sprintf(sqlstr, "select UName from CL_ParkingArea where ID=(select max(ID) from CL_ParkingArea)");
	rtn = db_file_exec_sql_table(cl_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow == 1)
	{
		uname = sqldata[1]? sqldata[1]: "";
	}
	else
	{
	    DBG("CL_ParkingArea tabal date select count err\n");
		sqlite3_free_table_safe(sqldata);
	    return 1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}

/***取id最大一条数据的ParkingAreaID***/
int db_factory_get_ParkingAreaID(string &parkareaid)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

	sprintf(sqlstr, "select ParkingAreaID from CL_ParkingArea where ID=(select max(ID) from CL_ParkingArea)");
	rtn = db_file_exec_sql_table(cl_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow == 1)
	{
		parkareaid = sqldata[1]? sqldata[1]: "";
	}
	else
	{
	    DBG("CL_ParkingArea tabal date select count err\n");
		sqlite3_free_table_safe(sqldata);
	    return 1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;	
}
int db_camera_delete_all()
{
	int rtn = 0;
	char sqlstr[256] = {0};

	sprintf(sqlstr,"delete from TB_Camera");
	
	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0)
	{
		DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
		return -1;
	}

	return 0;
}
int db_camera_add(DB_Camera_Data &data)
{
    int rtn = 0;
    //char sqlstr[1024] = {0};
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);
    snprintf(sqlstr,1024,"insert into TB_Camera(Guid,ParkingAreaGuid,CameraName,CameraIP,"
            "CameraType,CameraDirection,Username,Password,Port,IsEnable,CameraArrayName,Message,"
            "MatrixSubCode,CameraArrayGuid,TriggerMode,DecodeType,EquipmentType"
            ")values('%s','%s','%s','%s',%d,%d,'%s','%s',%d,%d,'%s','%s','%s','%s',%d,%d,%d)", 
            data.Guid.c_str(), data.ParkingAreaGuid.c_str(), data.CameraName.c_str(), data.CameraIP.c_str(), 
            data.CameraType, data.CameraDirection, data.Username.c_str(), data.Password.c_str(), 
            data.Port, data.IsEnable, data.CameraArrayName.c_str(), data.Message.c_str(),
            data.MatrixSubCode.c_str(), data.CameraArrayGuid.c_str(), data.TriggerMode,data.DecodeType,
            data.EquipmentType);
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;
}
int db_camera_get_guid(const char* ip, string &camera_guid)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

	sprintf(sqlstr, "select Guid from TB_Camera where CameraIP='%s'", ip);
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow > 0)
	{
		camera_guid = sqldata[1]? sqldata[1]: "";
	}
	else
	{
	    DBG("TB_Camera tabal date select count err\n");
		sqlite3_free_table_safe(sqldata);
	    return 1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}

int db_camera_get_enable_common_cameras(vector<DB_Camera_Data> &v_data)
{
    int rtn = 0;
    //char sqlstr[1024] = {0};
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);
    sprintf(sqlstr, "select ID, Guid, ParkingAreaGuid, CameraName, CameraIP, CameraType, "
                "CameraDirection, Username, Password, Port, IsEnable, CameraArrayName, Message, "
                "MatrixSubCode, CameraArrayGuid,TriggerMode,DecodeType,EquipmentType "
                "from TB_Camera where IsEnable=1");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_Camera_Data  camera_data;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        camera_data.ID = atoi(sqldata[index+0]? sqldata[index+0]: "0");
        camera_data.Guid = (sqldata[index+1]? sqldata[index+1]: "");
        camera_data.ParkingAreaGuid = (sqldata[index+2]? sqldata[index+2]: "");
        camera_data.CameraName = (sqldata[index+3]? sqldata[index+3]: "");
        camera_data.CameraIP = (sqldata[index+4]? sqldata[index+4]: "");
        camera_data.CameraType = atoi(sqldata[index+5]? sqldata[index+5]: "0");
        camera_data.CameraDirection = atoi(sqldata[index+6]? sqldata[index+6]: "0");
        camera_data.Username = (sqldata[index+7]? sqldata[index+7]: "");
        camera_data.Password = (sqldata[index+8]? sqldata[index+8]: "");
        camera_data.Port = atoi(sqldata[index+9]? sqldata[index+9]: "0");
        camera_data.IsEnable = atoi(sqldata[index+10]? sqldata[index+10]: "0");
        camera_data.CameraArrayName = (sqldata[index+11]? sqldata[index+11]: "");
        camera_data.Message = (sqldata[index+12]? sqldata[index+12]: "");
		camera_data.MatrixSubCode = (sqldata[index+13]? sqldata[index+13]: "");
		camera_data.CameraArrayGuid = (sqldata[index+14]? sqldata[index+14]: "");
		camera_data.TriggerMode = atoi(sqldata[index+15]? sqldata[index+15]: "0");
		camera_data.DecodeType = atoi(sqldata[index+16]? sqldata[index+16]: "0");
		camera_data.EquipmentType = atoi(sqldata[index+17]? sqldata[index+17]: "0");

        v_data.push_back(camera_data);
    }

    sqlite3_free_table_safe(sqldata);

    free(sqlstr);
    return 0;

}
int db_camera_get_set_info(char *ip, DB_Camera_Data &data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);
    sprintf(sqlstr, "select ID, Guid, ParkingAreaGuid, CameraName, CameraIP, CameraType, "
                "CameraDirection, Username, Password, Port, IsEnable, CameraArrayName, Message, "
                "MatrixSubCode, CameraArrayGuid,TriggerMode,DecodeType,EquipmentType "
                "from TB_Camera where CameraIP='%s'", ip);
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
//    DB_Camera_Data  camera_data;
    if(nrow > 0)
    {
        index = ncol;
        data.ID = atoi(sqldata[index+0]? sqldata[index+0]: "0");
        data.Guid = (sqldata[index+1]? sqldata[index+1]: "");
        data.ParkingAreaGuid = (sqldata[index+2]? sqldata[index+2]: "");
        data.CameraName = (sqldata[index+3]? sqldata[index+3]: "");
        data.CameraIP = (sqldata[index+4]? sqldata[index+4]: "");
        data.CameraType = atoi(sqldata[index+5]? sqldata[index+5]: "0");
        data.CameraDirection = atoi(sqldata[index+6]? sqldata[index+6]: "0");
        data.Username = (sqldata[index+7]? sqldata[index+7]: "");
        data.Password = (sqldata[index+8]? sqldata[index+8]: "");
        data.Port = atoi(sqldata[index+9]? sqldata[index+9]: "0");
        data.IsEnable = atoi(sqldata[index+10]? sqldata[index+10]: "0");
        data.CameraArrayName = (sqldata[index+11]? sqldata[index+11]: "");
        data.Message = (sqldata[index+12]? sqldata[index+12]: "");
		data.MatrixSubCode = (sqldata[index+13]? sqldata[index+13]: "");
		data.CameraArrayGuid = (sqldata[index+14]? sqldata[index+14]: "");
		data.TriggerMode = atoi(sqldata[index+15]? sqldata[index+15]: "0");
		data.DecodeType = atoi(sqldata[index+16]? sqldata[index+16]: "0");
		data.EquipmentType = atoi(sqldata[index+17]? sqldata[index+17]: "0");
    }

    sqlite3_free_table_safe(sqldata);

    free(sqlstr);
    return 0;

}

int db_camera_get_ip(string &ip, string &camera_guid)
{
    int rtn = 0;
    char sqlstr[256] = {0};
    char **sqldata;
    int nrow = 0;
    int ncol = 0;

	if(camera_guid.empty())
	{
	    DBG("[db_camera_get_ip] camera_guid empty");
        return -1;
	}

	sprintf(sqlstr, "select CameraIP from TB_Camera where Guid='%s'", camera_guid.c_str());
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow == 1)
	{
		ip = sqldata[1]? sqldata[1]: "";
	}
	else
	{
	    DBG("TB_Camera tabal date select count err\n");
		sqlite3_free_table_safe(sqldata);
	    return 1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;	
}

int db_parking_space_delete_all()
{
	int rtn = 0;
	char sqlstr[256] = {0};

	sprintf(sqlstr,"delete from TB_ParkingSpace");
	
	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0)
	{
		DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
		return -1;
	}

	return 0;
}
int db_parking_space_insert_part1(DB_ParkingSpace &data)
{
    int rtn = 0;
    //char sqlstr[1024] = {0};
    char *sqlstr;

    sqlstr = (char *)malloc(2048);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,2048);
    snprintf(sqlstr,2048,"insert into TB_ParkingSpace("
            "Guid,ParkingSpaceID,ParkingSpaceName,ParkingAreaGuid,CameraGuid,"
            "PlateVisible,SpaceTiltDirection,LightInfluence,SpaceInCameras,DynamicDecision, "
            "PanoramaCameraGuid, Type,IsEnable) values('%s','%s','%s','%s','%s',%d,%d,%d,%d,%d,'%s',%d,%d)",
            data.Guid.c_str(), data.ParkingSpaceID.c_str(), data.ParkingSpaceName.c_str(), 
            data.ParkingAreaGuid.c_str(), data.CameraGuid.c_str(), 
            data.PlateVisible, data.SpaceTiltDirection, 
            data.LightInfluence, data.SpaceInCameras, data.DynamicDecision, 
            data.PanoramaCameraGuid.c_str(), data.Type, data.IsEnable);
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;
}

int db_parking_space_update_recognition_area_zw(string parking_space_guid, string recognition_area_guid,
        int recognition_area_type)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);

    switch(recognition_area_type)
    {
	    case 1:
	        //大识别区
			snprintf(sqlstr,1024,"update TB_ParkingSpace set BigAreaGuid='%s' where Guid='%s'", 
				recognition_area_guid.c_str(), parking_space_guid.c_str());
	        break;
	    case 2:
	        //小识别区
			snprintf(sqlstr,1024,"update TB_ParkingSpace set SmallAreaGuid='%s' where Guid='%s'", 
				recognition_area_guid.c_str(), parking_space_guid.c_str());
	        break;
	    default:
	        INFO("%s:unknown recognition_area_type:%d", __FUNCTION__, recognition_area_type);
	        return 0;
	        break;
    }
            
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;   
}

int db_parking_space_update_recognition_area(string parking_space_guid, string recognition_area_guid,
        int recognition_area_type)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);

    switch(recognition_area_type)
    {
	    case AREATYPE_VEHICLE:
	        //车位识别区
			snprintf(sqlstr,1024,"update TB_ParkingSpace set VehicleAreaGuid='%s' where Guid='%s'", 
				recognition_area_guid.c_str(), parking_space_guid.c_str());
	        break;
	    case AREATYPE_SCANIN:
	        //入场扫描识别区
			snprintf(sqlstr,1024,"update TB_ParkingSpace set PlateArea1Guid='%s' where Guid='%s'", 
				recognition_area_guid.c_str(), parking_space_guid.c_str());
	        break;
	    case AREATYPE_DIFF:
	        //差分识别区
			snprintf(sqlstr,1024,"update TB_ParkingSpace set DiffAreaGuid='%s' where Guid='%s'", 
				recognition_area_guid.c_str(), parking_space_guid.c_str());
	        break;
	    case AREATYPE_RECALL:
	        //回溯识别区
			snprintf(sqlstr,1024,"update TB_ParkingSpace set RecallAreaGuid='%s' where Guid='%s'", 
				recognition_area_guid.c_str(), parking_space_guid.c_str());
	        break;
	    case AREATYPE_SCANOUT:
	        //出场扫描识别区
			snprintf(sqlstr,1024,"update TB_ParkingSpace set PlateArea2Guid='%s' where Guid='%s'", 
				recognition_area_guid.c_str(), parking_space_guid.c_str());
	        break;
	    default:
	        INFO("%s:unknown recognition_area_type:%d", __FUNCTION__, recognition_area_type);
	        return 0;
	        break;
    }
            
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;   
}
static string SS(string s)
{
	string ss;
	ss = "'";
	ss += s;
	ss += "'";
	return ss;
}
/*
 * 设置泊位光线影响的属性（103里面：1：有效；2：无效；3：树叶遮挡；）
 *
 * 参数：
 * name：车位名称(ParkingSpaceName)
 * light_influence：1：有效；2：无效；3：树叶遮挡；
 *
 * 返回值：
 * 0：成功
 * -1：出错
 * */
int db_parking_space_set_light_influence(const char *name, int light_influence)
{
	int ret = 0;
    stringstream ss;
	ss << "update TB_ParkingSpace set LightInfluence=" << light_influence << " where ParkingSpaceName=" << SS(name);

//    DBG("ss=%s", ss.str().c_str());
    ret = db_file_exec_sql(roadeside_parking_db.db_file_path, (char *)ss.str().c_str(), NULL, NULL);
    if(ret < 0){
    	ERR("%s db_file_exec_sql:%s Err", __FUNCTION__, ss.str().c_str());
        return -1;
    }
    //找到内存中的变量并更新

	return ret;
}
int db_parking_space_get_by_camera(string camera_guid, vector<DB_ParkingSpace> &v_data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);
    sprintf(sqlstr, "select ID, Guid, ParkingSpaceID, ParkingSpaceName, ParkingAreaGuid, "
                "CameraGuid, BigAreaGuid, SmallAreaGuid, DiffAreaGuid, RecallAreaGuid, "
                "PlateArea1Guid, PlateArea2Guid, VehicleAreaGuid, PlateVisible, "
                "SpaceTiltDirection, LightInfluence, SpaceInCameras, DynamicDecision, "
                "PanoramaCameraGuid, Type,IsEnable "
                "from TB_ParkingSpace where CameraGuid='%s'", camera_guid.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_ParkingSpace  parkingspace_data;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        parkingspace_data.ID = atoi(sqldata[index+0]? sqldata[index+0]: "0");
        parkingspace_data.Guid = (sqldata[index+1]? sqldata[index+1]: "");
        parkingspace_data.ParkingSpaceID = (sqldata[index+2]? sqldata[index+2]: "");
        parkingspace_data.ParkingSpaceName = (sqldata[index+3]? sqldata[index+3]: "");
        parkingspace_data.ParkingAreaGuid = (sqldata[index+4]? sqldata[index+4]: "");
        parkingspace_data.CameraGuid = (sqldata[index+5]? sqldata[index+5]: "");
        parkingspace_data.BigAreaGuid = (sqldata[index+6]? sqldata[index+6]: "");
        parkingspace_data.SmallAreaGuid = (sqldata[index+7]? sqldata[index+7]: "");
        parkingspace_data.DiffAreaGuid = (sqldata[index+8]? sqldata[index+8]: "");
        parkingspace_data.RecallAreaGuid = (sqldata[index+9]? sqldata[index+9]: "");
        parkingspace_data.PlateArea1Guid = (sqldata[index+10]? sqldata[index+10]: "");
        parkingspace_data.PlateArea2Guid = (sqldata[index+11]? sqldata[index+11]: "");
        parkingspace_data.VehicleAreaGuid = (sqldata[index+12]? sqldata[index+12]: "");
        parkingspace_data.PlateVisible = atoi(sqldata[index+13]? sqldata[index+13]: "0");
        parkingspace_data.SpaceTiltDirection = atoi(sqldata[index+14]? sqldata[index+14]: "0");
        parkingspace_data.LightInfluence = atoi(sqldata[index+15]? sqldata[index+15]: "0");
        parkingspace_data.SpaceInCameras = atoi(sqldata[index+16]? sqldata[index+16]: "0");
        parkingspace_data.DynamicDecision = atoi(sqldata[index+17]? sqldata[index+17]: "0");
		parkingspace_data.PanoramaCameraGuid = (sqldata[index+18]? sqldata[index+18]: "");
		parkingspace_data.Type = atoi(sqldata[index+19]? sqldata[index+19]: "0");
		parkingspace_data.IsEnable = atoi(sqldata[index+20]? sqldata[index+20]: "0");

        v_data.push_back(parkingspace_data);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}
int db_recognition_area_delete_all()
{
	int rtn = 0;
	char sqlstr[256] = {0};

	sprintf(sqlstr,"delete from TB_RecognitionArea");
	
	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0)
	{
		DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
		return -1;
	}

	return 0;
}
int db_recognition_area_insert(DB_RecognitionArea_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr,0x0,1024);

	snprintf(sqlstr,1024,"insert into TB_RecognitionArea("
            "Guid,StartX,StartY,AreaWidth,AreaHeight,"
            "StretchWidth,StretchHeight,TiltWidth,TiltHeight,"
            "RotateAngle,RotateRange,RotateStep"
            ") values('%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d)",
            data.Guid.c_str(), data.StartX, data.StartY, data.AreaWidth, data.AreaHeight, 
            data.StretchWidth, data.StretchHeight, data.TiltWidth, data.TiltHeight, 
            data.RotateAngle, data.RotateRange, data.RotateStep);
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;
}
int db_recognition_area_get(string recognition_area_guid, DB_RecognitionArea_Data &data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    sprintf(sqlstr, "select ID, Guid, StartX, StartY, AreaWidth, AreaHeight, StretchWidth, "
                "StretchHeight, TiltWidth, TiltHeight, RotateAngle, RotateRange, RotateStep "
                "from TB_RecognitionArea where Guid='%s'", recognition_area_guid.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    if(nrow == 1)
    {
        data.ID = atoi(sqldata[ncol+0]? sqldata[ncol+0]: "0");
        data.Guid = sqldata[ncol+1]? sqldata[ncol+1]: "";
        data.StartX = atoi(sqldata[ncol+2]? sqldata[ncol+2]: "0");
        data.StartY = atoi(sqldata[ncol+3]? sqldata[ncol+3]: "0");
        data.AreaWidth = atoi(sqldata[ncol+4]? sqldata[ncol+4]: "0");
        data.AreaHeight = atoi(sqldata[ncol+5]? sqldata[ncol+5]: "0");
        data.StretchWidth = atoi(sqldata[ncol+6]? sqldata[ncol+6]: "0");
        data.StretchHeight = atoi(sqldata[ncol+7]? sqldata[ncol+7]: "0");
        data.TiltWidth = atoi(sqldata[ncol+8]? sqldata[ncol+8]: "0");
        data.TiltHeight = atoi(sqldata[ncol+9]? sqldata[ncol+9]: "0");
        data.RotateAngle = atoi(sqldata[ncol+10]? sqldata[ncol+10]: "0");
        data.RotateRange = atoi(sqldata[ncol+11]? sqldata[ncol+11]: "0");
        data.RotateStep = atoi(sqldata[ncol+12]? sqldata[ncol+12]: "0");
    }
    else
    {
        DBG("TB_RecognitionArea tabal parking_space_guid=%s count err\n", recognition_area_guid.c_str());
        sqlite3_free_table_safe(sqldata);
        free(sqlstr);
        return 1;
    }
    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return rtn; 
}
int db_version_delete()
{
	int rtn = 0;
	char sqlstr[256] = {0};

	sprintf(sqlstr,"delete from conf_version");
	
	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0)
	{
		DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
		return -1;
	}

	return 0;
}
int db_version_insert(DB_Conf_Version_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    snprintf(sqlstr,1024,"insert into conf_version(version,time) values('%s','%s')",
            data.version.c_str(), data.time.c_str());
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;
}
int db_version_get(string &conf_version)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

	sprintf(sqlstr, "select version from conf_version where id=(select MIN(id) from conf_version)");
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow == 1)
	{
		conf_version = sqldata[1]? sqldata[1]: "";
	}
	else
	{
	    DBG("conf_version tabal date select count err\n");
		sqlite3_free_table_safe(sqldata);
	    return 1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}
int db_parking_area_delete()
{
	int rtn = 0;
	char sqlstr[256] = {0};

	sprintf(sqlstr,"delete from TB_ParkingArea");
	
	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0)
	{
		DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
		return -1;
	}

	return 0;
}
int db_parking_area_insert(DB_ParkingArea_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(2048);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 2048);
    snprintf(sqlstr,2048,"insert into TB_ParkingArea("
            "Guid,ParkingAreaName,ParkingAreaIP,ParkingAreaType,ParkingLotGuid,"
            "InParkingCount,OutParkingCount,InParkingMatchCount,OutParkingMatchCount,"
            "NightStartTime,NightEndTime,NightSuperimposeCount,PanoramicPicStart,PanoramicPicEnd,"
            "ParkingAreaID,Message,Is4GModel,NoEventImageUploadInterval,MonitorImageUploadInterval,"
            "PlateDefault,IsBlueDifference,DayPixelDifferenceTreshold,DayFrequencyDomainTreshold,"
            "NightPixelDifferenceTreshold,NightFrequencyDomainTreshold,FrameInterval,"
            "PlateRectOffset,PlateWidthMultiples,PlateHeightMultiples,"
            "GaussianBlurRadius,PixelDifferenceRange,PixelDifferenceTreshold,"
            "ReceivePicControl,DelayedReportingParameter,IsIllegalParkingCheck,IsPrintPklName,"
            "City,InspectionWay,InParkingScanCount,"
            "IllegalParkingBallManufacturer,Resolution,BitRateType,BitRateUpperLimit,VideoFrameRate,"
            "SnapshotAreaCloseUpPictureCount,SnapshotPanoramaPictureCount,"
            "SnapshotVehicleCloseUpPictureCount,FirstSecondIntervalTime,SecondPanoramaIntervalTime,"
            "NightFrontBackSwitch,UploadNoPlateSwitch,UploadFilterDataSwitch,UploadAlarmSwitch,"
            "ParkingSpaceOutsideIllegalParking,ParkingSpaceInsideIllegalParking,MicroCheckPoint,TimeLimitParking,"
            "ShortVideoSwitch,AlarmLevel"
            ") values("
            "'%s','%s','%s',%d,'%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,'%s','%s',"
            "%d,%d,%d,'%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,'%s',%d,%d,"
            "'%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d)",
            data.Guid.c_str(), data.ParkingAreaName.c_str(), data.ParkingAreaIP.c_str(), 
            data.ParkingAreaType, data.ParkingLotGuid.c_str(), 
            data.InParkingCount, data.OutParkingCount, data.InParkingMatchCount, 
            data.OutParkingMatchCount, data.NightStartTime, data.NightEndTime, 
            data.NightSuperimposeCount, data.PanoramicPicStart, data.PanoramicPicEnd, 
            data.ParkingAreaID.c_str(), data.Message.c_str(), data.Is4GModel, 
            data.NoEventImageUploadInterval, data.MonitorImageUploadInterval, 
            data.PlateDefault.c_str(), data.IsBlueDifference, 
            data.DayPixelDifferenceTreshold, data.DayFrequencyDomainTreshold, 
            data.NightPixelDifferenceTreshold, data.NightFrequencyDomainTreshold,
            data.FrameInterval, data.PlateRectOffset, data.PlateWidthMultiples, 
            data.PlateHeightMultiples, data.GaussianBlurRadius, 
            data.PixelDifferenceRange, data.PixelDifferenceTreshold,
            data.ReceivePicControl, data.DelayedReportingParameter.c_str(),
            data.IsIllegalParkingCheck, data.IsPrintPklName,
            data.City.c_str(), data.InspectionWay, data.InParkingScanCount,
            data.IllegalParkingBallManufacturer, data.Resolution, data.BitRateType, 
            data.BitRateUpperLimit, data.VideoFrameRate, data.SnapshotAreaCloseUpPictureCount, 
            data.SnapshotPanoramaPictureCount, data.SnapshotVehicleCloseUpPictureCount, 
            data.FirstSecondIntervalTime, data.SecondPanoramaIntervalTime, data.NightFrontBackSwitch, 
            data.UploadNoPlateSwitch, data.UploadFilterDataSwitch, data.UploadAlarmSwitch,
            data.ParkingSpaceOutsideIllegalParking, data.ParkingSpaceInsideIllegalParking,
            data.MicroCheckPoint, data.TimeLimitParking, data.ShortVideoSwitch, 
            data.AlarmLevel);
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;
}
int db_parking_area_get_guid(string &parking_area_guid)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

	sprintf(sqlstr, "select Guid from TB_ParkingArea where ID=(select MIN(ID) from TB_ParkingArea)");
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow == 1)
	{
		parking_area_guid = sqldata[1]? sqldata[1]: "";
	}
	else
	{
	    DBG("TB_ParkingArea tabal date select count err\n");
		sqlite3_free_table_safe(sqldata);
	    return 1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}

/*
 * 获取TB_ParkingArea的数据（取最小id一条数据）
 *
 * 0：成功
 * -1：失败
 * */
int db_parking_area_get_data(DB_ParkingArea_Data& data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;

    sqlstr = (char *)malloc(2048);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 2048);
    snprintf(sqlstr, 2048, "select ID, Guid, ParkingAreaName, ParkingAreaIP, ParkingAreaType, "
                "ParkingLotGuid, InParkingCount, OutParkingCount, InParkingMatchCount, "
                "OutParkingMatchCount, NightStartTime, NightEndTime, NightSuperimposeCount, "
                "PanoramicPicStart, PanoramicPicEnd, ParkingAreaID, Is4GModel, "
                "NoEventImageUploadInterval, MonitorImageUploadInterval, PlateDefault, "
                "IsBlueDifference, DayPixelDifferenceTreshold, DayFrequencyDomainTreshold, "
                "NightPixelDifferenceTreshold, NightFrequencyDomainTreshold, FrameInterval, "
                "PlateRectOffset, PlateWidthMultiples, PlateHeightMultiples, "
                "GaussianBlurRadius, PixelDifferenceRange, PixelDifferenceTreshold,Message, "
                "ReceivePicControl, DelayedReportingParameter, IsIllegalParkingCheck, "
				"IsPrintPklName, City, InspectionWay, InParkingScanCount,"
				"IllegalParkingBallManufacturer,Resolution,BitRateType,BitRateUpperLimit,VideoFrameRate,"
            	"SnapshotAreaCloseUpPictureCount,SnapshotPanoramaPictureCount,"
            	"SnapshotVehicleCloseUpPictureCount,FirstSecondIntervalTime,SecondPanoramaIntervalTime,"
            	"NightFrontBackSwitch,UploadNoPlateSwitch,UploadFilterDataSwitch,UploadAlarmSwitch,"
            	"ParkingSpaceOutsideIllegalParking,ParkingSpaceInsideIllegalParking,MicroCheckPoint,"
            	"TimeLimitParking,ShortVideoSwitch,AlarmLevel "
                "from TB_ParkingArea where ID=(select MIN(ID) from TB_ParkingArea)");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    if(nrow == 1)
    {
        data.ID = atoi(sqldata[ncol+0]? sqldata[ncol+0]: "NULL");
        data.Guid = sqldata[ncol+1]? sqldata[ncol+1]: "NULL";
        data.ParkingAreaName = sqldata[ncol+2]? sqldata[ncol+2]: "NULL";
        data.ParkingAreaIP = sqldata[ncol+3]? sqldata[ncol+3]: "NULL";
        data.ParkingAreaType = atoi(sqldata[ncol+4]? sqldata[ncol+4]: "NULL");
        data.ParkingLotGuid = sqldata[ncol+5]? sqldata[ncol+5]: "NULL";
        data.InParkingCount = atoi(sqldata[ncol+6]? sqldata[ncol+6]: "NULL");
        data.OutParkingCount = atoi(sqldata[ncol+7]? sqldata[ncol+7]: "NULL");
        data.InParkingMatchCount = atoi(sqldata[ncol+8]? sqldata[ncol+8]: "NULL");
        data.OutParkingMatchCount = atoi(sqldata[ncol+9]? sqldata[ncol+9]: "NULL");
        data.NightStartTime = atoi(sqldata[ncol+10]? sqldata[ncol+10]: "NULL");
        data.NightEndTime = atoi(sqldata[ncol+11]? sqldata[ncol+11]: "NULL");
        data.NightSuperimposeCount = atoi(sqldata[ncol+12]? sqldata[ncol+12]: "NULL");
        data.PanoramicPicStart = atoi(sqldata[ncol+13]? sqldata[ncol+13]: "NULL");
        data.PanoramicPicEnd = atoi(sqldata[ncol+14]? sqldata[ncol+14]: "NULL");
        data.ParkingAreaID = sqldata[ncol+15]? sqldata[ncol+15]: "NULL";
        data.Is4GModel = atoi(sqldata[ncol+16]? sqldata[ncol+16]: "NULL");
        data.NoEventImageUploadInterval = atoi(sqldata[ncol+17]? sqldata[ncol+17]: "NULL");
        data.MonitorImageUploadInterval = atoi(sqldata[ncol+18]? sqldata[ncol+18]: "NULL");
        data.PlateDefault = sqldata[ncol+19]? sqldata[ncol+19]: "NULL";
        data.IsBlueDifference = atoi(sqldata[ncol+20]? sqldata[ncol+20]: "NULL");
        data.DayPixelDifferenceTreshold = atoi(sqldata[ncol+21]? sqldata[ncol+21]: "NULL");
        data.DayFrequencyDomainTreshold = atoi(sqldata[ncol+22]? sqldata[ncol+22]: "NULL");
        data.NightPixelDifferenceTreshold = atoi(sqldata[ncol+23]? sqldata[ncol+23]: "NULL");
        data.NightFrequencyDomainTreshold = atoi(sqldata[ncol+24]? sqldata[ncol+24]: "NULL");
        data.Message = sqldata[ncol+32]? sqldata[ncol+32]: "NULL";
        data.FrameInterval = atoi(sqldata[ncol+25]? sqldata[ncol+25]: "NULL");
        data.PlateRectOffset = atoi(sqldata[ncol+26]? sqldata[ncol+26]: "NULL");
        data.PlateWidthMultiples = atoi(sqldata[ncol+27]? sqldata[ncol+27]: "NULL");
        data.PlateHeightMultiples = atoi(sqldata[ncol+28]? sqldata[ncol+28]: "NULL");
        data.GaussianBlurRadius = atoi(sqldata[ncol+29]? sqldata[ncol+29]: "NULL");
        data.PixelDifferenceRange = atoi(sqldata[ncol+30]? sqldata[ncol+30]: "NULL");
        data.PixelDifferenceTreshold = atoi(sqldata[ncol+31]? sqldata[ncol+31]: "NULL");
        data.ReceivePicControl = atoi(sqldata[ncol+33]? sqldata[ncol+33]: "NULL");
        data.DelayedReportingParameter = sqldata[ncol+34]? sqldata[ncol+34]: "NULL";
        data.IsIllegalParkingCheck = atoi(sqldata[ncol+35]? sqldata[ncol+35]: "NULL");
		data.IsPrintPklName = atoi(sqldata[ncol+36]? sqldata[ncol+36]: "NULL");
		data.City = sqldata[ncol+37]? sqldata[ncol+37]: "NULL";
		data.InspectionWay = atoi(sqldata[ncol+38]? sqldata[ncol+38]: "NULL");
		data.InParkingScanCount = atoi(sqldata[ncol+39]? sqldata[ncol+39]: "NULL");
		
		data.IllegalParkingBallManufacturer = atoi(sqldata[ncol+40]? sqldata[ncol+40]: "NULL");
		data.Resolution = atoi(sqldata[ncol+41]? sqldata[ncol+41]: "NULL");
		data.BitRateType = atoi(sqldata[ncol+42]? sqldata[ncol+42]: "NULL");
		data.BitRateUpperLimit = atoi(sqldata[ncol+43]? sqldata[ncol+43]: "NULL");
		data.VideoFrameRate = atoi(sqldata[ncol+44]? sqldata[ncol+44]: "NULL");
		data.SnapshotAreaCloseUpPictureCount = atoi(sqldata[ncol+45]? sqldata[ncol+45]: "NULL");
		data.SnapshotPanoramaPictureCount = atoi(sqldata[ncol+46]? sqldata[ncol+46]: "NULL");
		data.SnapshotVehicleCloseUpPictureCount = atoi(sqldata[ncol+47]? sqldata[ncol+47]: "NULL");
		data.FirstSecondIntervalTime = atoi(sqldata[ncol+48]? sqldata[ncol+48]: "NULL");
		data.SecondPanoramaIntervalTime = atoi(sqldata[ncol+49]? sqldata[ncol+49]: "NULL");
		data.NightFrontBackSwitch = atoi(sqldata[ncol+50]? sqldata[ncol+50]: "NULL");
		data.UploadNoPlateSwitch = atoi(sqldata[ncol+51]? sqldata[ncol+51]: "NULL");
		data.UploadFilterDataSwitch = atoi(sqldata[ncol+52]? sqldata[ncol+52]: "NULL");
		data.UploadAlarmSwitch = atoi(sqldata[ncol+53]? sqldata[ncol+53]: "NULL");
		data.ParkingSpaceOutsideIllegalParking = atoi(sqldata[ncol+54]? sqldata[ncol+54]: "NULL");
		data.ParkingSpaceInsideIllegalParking = atoi(sqldata[ncol+55]? sqldata[ncol+55]: "NULL");
		data.MicroCheckPoint = atoi(sqldata[ncol+56]? sqldata[ncol+56]: "NULL");
		data.TimeLimitParking = atoi(sqldata[ncol+57]? sqldata[ncol+57]: "NULL");
		data.ShortVideoSwitch = atoi(sqldata[ncol+58]? sqldata[ncol+58]: "NULL");
		data.AlarmLevel = atoi(sqldata[ncol+59]? sqldata[ncol+59]: "NULL");
    }
    else
    {
        DBG("TB_ParkingArea tabal date count err\n");
        sqlite3_free_table_safe(sqldata);
        free(sqlstr);
        return 1;
    }
    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return rtn; 
}

int db_parking_lot_update_part2(DB_ParkingLot_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(2048);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 2048);
    snprintf(sqlstr,2048,"update TB_ParkingLot set CloudServerPath='%s',"
            "TransferServicePath='%s',RecUplodPath='%s',MonImageUplodPath='%s',"
            "EquStateUplodPath='%s',EquAlertUplodPath='%s',CloudServerPort=%d,"
            "FileServicePort=%d,BlueBrainInterfacePath='%s',"
            "BlueBrainInterfacePort=%d,BlueBrainPicPath='%s',BlueBrainPicPort=%d,"
            "SpaceExcpUploadPath='%s' where ID=(select MIN(ID) from TB_ParkingLot)",
            data.CloudServerPath.c_str(), data.TransferServicePath.c_str(), data.RecUplodPath.c_str(),
            data.MonImageUplodPath.c_str(), data.EquStateUplodPath.c_str(), data.EquAlertUplodPath.c_str(),
            data.CloudServerPort, data.FileServicePort, data.BlueBrainInterfacePath.c_str(), 
            data.BlueBrainInterfacePort, data.BlueBrainPicPath.c_str(), data.BlueBrainPicPort, 
            data.SpaceExcpUploadPath.c_str());
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}

int db_parking_lot_get_cloud_addr_from_factory(string &server_path, int* server_port, string &file_server_path, int* file_server_port)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

	sprintf(sqlstr, "select CloudServerPath,TransferServicePath,CloudServerPort,FileServicePort from TB_ParkingLot "
            "where ID=(select MIN(ID) from TB_ParkingLot)");
	rtn = db_file_exec_sql_table(factory_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow == 1)
	{
		server_path = sqldata[ncol+0]? sqldata[ncol+0]: "";
		file_server_path = sqldata[ncol+1]? sqldata[ncol+1]: "";
		*server_port = atoi(sqldata[ncol+2]? sqldata[ncol+2]: "0");
		*file_server_port = atoi(sqldata[ncol+3]? sqldata[ncol+3]: "0");
	}
	else
	{
	    DBG("TB_ParkingLot tabal date select count err\n");
		sqlite3_free_table_safe(sqldata);
	    return 1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}

int db_parking_lot_get_cloud_addr(string &server_path, int* server_port, string &file_server_path, int* file_server_port)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

	sprintf(sqlstr, "select CloudServerPath,TransferServicePath,CloudServerPort,FileServicePort from TB_ParkingLot "
            "where ID=(select MIN(ID) from TB_ParkingLot)");
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow == 1)
	{
		server_path = sqldata[ncol+0]? sqldata[ncol+0]: "";
		file_server_path = sqldata[ncol+1]? sqldata[ncol+1]: "";
		*server_port = atoi(sqldata[ncol+2]? sqldata[ncol+2]: "0");
		*file_server_port = atoi(sqldata[ncol+3]? sqldata[ncol+3]: "0");
	}
	else
	{
	    DBG("TB_ParkingLot tabal date select count err\n");
		sqlite3_free_table_safe(sqldata);
	    return 1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}

int db_recognition_line_delete_all()
{
	int rtn = 0;
	char sqlstr[256] = {0};

	sprintf(sqlstr,"delete from TB_RecognitionLine");
	
	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0)
	{
		DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
		return -1;
	}

	return 0;
}
int db_recognition_line_insert(DB_RecognitionLine_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);

    snprintf(sqlstr,1024,"insert into TB_RecognitionLine("
            "Guid,ParkingAreaGuid,ParkingSpaceGuid,RecognitionLineType,"
            "StartX,StartY,EndX,EndY"
            ") values('%s','%s','%s',%d,%d,%d,%d,%d)",
            data.Guid.c_str(), data.ParkingAreaGuid.c_str(), data.ParkingSpaceGuid.c_str(), 
            data.RecognitionLineType, data.StartX, data.StartY, 
            data.EndX, data.EndY);
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);

    return 0;
}

int db_recognition_line_get_by_space(string space_guid, vector<DB_RecognitionLine_Data> &v_data)
{
    int rtn = 0;
    //char sqlstr[1024] = {0};
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    sprintf(sqlstr, "select ID, Guid, ParkingAreaGuid, ParkingSpaceGuid, "
                "RecognitionLineType, StartX, StartY, EndX, EndY "
                "from TB_RecognitionLine where ParkingSpaceGuid='%s'", space_guid.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_RecognitionLine_Data  recognition_line;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        recognition_line.Guid = sqldata[index+1]? sqldata[index+1]: "";
        recognition_line.ParkingSpaceGuid = sqldata[index+3]? sqldata[index+3]: "";
        recognition_line.RecognitionLineType = atoi(sqldata[index+4]? sqldata[index+4]: "0");
        recognition_line.StartX = atoi(sqldata[index+5]? sqldata[index+5]: "0");
        recognition_line.StartY = atoi(sqldata[index+6]? sqldata[index+6]: "0");
        recognition_line.EndX = atoi(sqldata[index+7]? sqldata[index+7]: "0");
        recognition_line.EndY = atoi(sqldata[index+8]? sqldata[index+8]: "0");
        v_data.push_back(recognition_line);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}

int db_recognition_point_delete_all()
{
	int rtn = 0;
	char sqlstr[256] = {0};

	sprintf(sqlstr,"delete from TB_RecognitionPoint");
	
	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0)
	{
		DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
		return -1;
	}

	return 0;
}
int db_recognition_point_insert(DB_RecognitionPoint_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);

    snprintf(sqlstr,1024,"insert into TB_RecognitionPoint("
            "Guid,ParkingAreaGuid,ParkingSpaceGuid,RecognitionPointType,"
            "PointX,PointY"
            ") values('%s','%s','%s',%d,%d,%d)",
            data.Guid.c_str(), data.ParkingAreaGuid.c_str(), data.ParkingSpaceGuid.c_str(), 
            data.RecognitionPointType, data.PointX, data.PointY);
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}

int db_recognition_point_get_by_space(string space_guid, vector<DB_RecognitionPoint_Data> &v_data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    sprintf(sqlstr, "select ID, Guid, ParkingAreaGuid, ParkingSpaceGuid, "
                "RecognitionPointType, PointX, PointY "
                "from TB_RecognitionPoint where ParkingSpaceGuid='%s'", space_guid.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
	int i = 0;
	DB_RecognitionPoint_Data  recognition_point;
	for(i=0; i<nrow; i++)
	{
		index = ncol * (i+1);
		recognition_point.Guid = sqldata[index+1]? sqldata[index+1]: "";
		recognition_point.ParkingSpaceGuid = sqldata[index+3]? sqldata[index+3]: "";
		recognition_point.RecognitionPointType = atoi(sqldata[index+4]? sqldata[index+4]: "0");
		recognition_point.PointX = atoi(sqldata[index+5]? sqldata[index+5]: "0");
		recognition_point.PointY = atoi(sqldata[index+6]? sqldata[index+6]: "0");
		v_data.push_back(recognition_point);
	}

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}

int db_recognition_polygon_delete_all()
{
    int rtn = 0;
    char sqlstr[256] = {0};

    sprintf(sqlstr,"delete from TB_RecognitionPolygon");
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        return -1;
    }

    return 0;
}
int db_recognition_polygon_insert(DB_RecognitionPolygon_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);

    snprintf(sqlstr,1024,"insert into TB_RecognitionPolygon("
            "Guid,ParkingAreaGuid,ParkingSpaceGuid,RecognitionPolygonType,Points"
            ") values('%s','%s','%s',%d,'%s')",
            data.Guid.c_str(), data.ParkingAreaGuid.c_str(), data.ParkingSpaceGuid.c_str(), 
            data.RecognitionPolygonType, data.Points.c_str());
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}

int db_recognition_polygon_get_by_space(string space_guid, vector<DB_RecognitionPolygon_Data> &v_data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    sprintf(sqlstr, "select ID, Guid, ParkingAreaGuid, ParkingSpaceGuid, "
                "RecognitionPolygonType, Points "
                "from TB_RecognitionPolygon where ParkingSpaceGuid='%s'", space_guid.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_RecognitionPolygon_Data  recognition_polygon;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        recognition_polygon.Guid = sqldata[index+1]? sqldata[index+1]: "";
        recognition_polygon.ParkingSpaceGuid = sqldata[index+3]? sqldata[index+3]: "";
        recognition_polygon.RecognitionPolygonType = atoi(sqldata[index+4]? sqldata[index+4]: "0");
        recognition_polygon.Points = sqldata[index+5]? sqldata[index+5]: "";
        v_data.push_back(recognition_polygon);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}

//相机矩阵
int db_camera_array_delete_all()
{
    int rtn = 0;
    char sqlstr[256] = {0};

    sprintf(sqlstr,"delete from TB_CameraArray");
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        return -1;
    }

    return 0;
}
int db_camera_array_insert(DB_CameraArray_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);

    snprintf(sqlstr,1024,"insert into TB_CameraArray("
            "Guid,Name,Type,ModelNumber"
            ") values('%s','%s',%d,%d)",
            data.Guid.c_str(), data.Name.c_str(),
            data.Type, data.ModelNumber);
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}

int db_camera_array_get_all(vector<DB_CameraArray_Data> &v_data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(256);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 256);
    sprintf(sqlstr, "select ID,Guid,Name,Type,ModelNumber from TB_CameraArray");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_CameraArray_Data  camera_array;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        camera_array.Guid = sqldata[index+1]? sqldata[index+1]: "";
        camera_array.Name = sqldata[index+2]? sqldata[index+2]: "";
        camera_array.Type = atoi(sqldata[index+3]? sqldata[index+3]: "0");
        camera_array.ModelNumber = atoi(sqldata[index+4]? sqldata[index+4]: "0");
        v_data.push_back(camera_array);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}

int db_camera_array_get_by_guid(string array_guid, DB_CameraArray_Data &data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;

    sqlstr = (char *)malloc(256);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 256);
    sprintf(sqlstr, "select ID,Guid,Name,Type,ModelNumber "
                "from TB_CameraArray where Guid='%s'", array_guid.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    if(nrow == 1)
    {
        data.Guid = sqldata[ncol+1]? sqldata[ncol+1]: "";
        data.Name = sqldata[ncol+2]? sqldata[ncol+2]: "";
        data.Type = atoi(sqldata[ncol+3]? sqldata[ncol+3]: "0");
        data.ModelNumber = atoi(sqldata[ncol+4]? sqldata[ncol+4]: "0");
    }
	else
    {
        DBG("TB_CameraArray guid=%s count err\n", array_guid.c_str());
        sqlite3_free_table_safe(sqldata);
        free(sqlstr);
        return 1;
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}

//矩阵控制器
int db_camera_controller_delete_all()
{
    int rtn = 0;
    char sqlstr[256] = {0};

    sprintf(sqlstr,"delete from TB_CameraController");
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        return -1;
    }

    return 0;
}
int db_camera_controller_insert(DB_CameraController_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);

    snprintf(sqlstr,1024,"insert into TB_CameraController("
            "Guid,Name,IP,Type,CameraArrayGuid"
            ") values('%s','%s','%s',%d,'%s')",
            data.Guid.c_str(), data.Name.c_str(),data.IP.c_str(),
            data.Type, data.CameraArrayGuid.c_str());
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}

int db_camera_controller_get_all(vector<DB_CameraController_Data> &v_data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(256);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 256);
    sprintf(sqlstr, "select ID,Guid,Name,IP,Type,CameraArrayGuid from TB_CameraController");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_CameraController_Data  camera_controller;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        camera_controller.Guid = sqldata[index+1]? sqldata[index+1]: "";
        camera_controller.Name = sqldata[index+2]? sqldata[index+2]: "";
		camera_controller.IP = sqldata[index+3]? sqldata[index+3]: "";
        camera_controller.Type = atoi(sqldata[index+4]? sqldata[index+4]: "0");
        camera_controller.CameraArrayGuid = sqldata[index+5]? sqldata[index+5]: "";;
        v_data.push_back(camera_controller);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}

int db_camera_controller_get_by_array(string array_guid, vector<DB_CameraController_Data> &v_data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(256);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 256);
    sprintf(sqlstr, "select ID,Guid,Name,IP,Type,CameraArrayGuid from TB_CameraController "
					"where CameraArrayGuid='%s'", array_guid.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_CameraController_Data  camera_controller;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        camera_controller.Guid = sqldata[index+1]? sqldata[index+1]: "";
        camera_controller.Name = sqldata[index+2]? sqldata[index+2]: "";
		camera_controller.IP = sqldata[index+3]? sqldata[index+3]: "";
        camera_controller.Type = atoi(sqldata[index+4]? sqldata[index+4]: "0");
        camera_controller.CameraArrayGuid = sqldata[index+5]? sqldata[index+5]: "";;
        v_data.push_back(camera_controller);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}

//NVR
int db_nvr_delete_all()
{
    int rtn = 0;
    char sqlstr[256] = {0};

    sprintf(sqlstr,"delete from TB_Nvr");
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        return -1;
    }

    return 0;
}
int db_nvr_insert(DB_Nvr_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);

    snprintf(sqlstr,1024,"insert into TB_Nvr("
            "Guid,NvrIP,NvrName,Username,Password,MapAddress,MapPort"
            ") values('%s','%s','%s','%s','%s','%s',%d)",
            data.Guid.c_str(), data.NvrIP.c_str(),data.NvrName.c_str(),
            data.Username.c_str(), data.Password.c_str(), data.MapAddress.c_str(), 
            data.MapPort);
	DBG("sqlstr:%s", sqlstr);
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}
int db_nvr_get_all(vector<DB_Nvr_Data> &v_data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(256);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 256);
    sprintf(sqlstr, "select ID,Guid,NvrIP,NvrName,Username,Password,MapAddress,MapPort from TB_Nvr");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_Nvr_Data  nvr_data;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        nvr_data.Guid = sqldata[index+1]? sqldata[index+1]: "";
        nvr_data.NvrIP = sqldata[index+2]? sqldata[index+2]: "";
		nvr_data.NvrName = sqldata[index+3]? sqldata[index+3]: "";
		nvr_data.Username = sqldata[index+4]? sqldata[index+4]: "";
        nvr_data.Password = sqldata[index+5]? sqldata[index+5]: "";
		nvr_data.MapAddress = sqldata[index+6]? sqldata[index+6]: "";
        nvr_data.MapPort = atoi(sqldata[index+7]? sqldata[index+7]: "0");
        v_data.push_back(nvr_data);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}
//NVR Camera
int db_nvr_camera_delete_all()
{
    int rtn = 0;
    char sqlstr[256] = {0};

    sprintf(sqlstr,"delete from TB_NvrCamera");
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        return -1;
    }

    return 0;
}
int db_nvr_camera_insert(DB_NvrCamera_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);

    snprintf(sqlstr,1024,"insert into TB_NvrCamera("
            "CameraGuid,CameraIP,NvrGuid"
            ") values('%s','%s','%s')",
            data.CameraGuid.c_str(), data.CameraIP.c_str(),data.NvrGuid.c_str());
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}
int db_nvr_camera_get_by_nvrguid(vector<DB_NvrCamera_Data> &v_data, string nvr_guid)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(256);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 256);
    sprintf(sqlstr, "select ID,CameraGuid,CameraIP,NvrGuid from TB_NvrCamera "
				"where NvrGuid='%s'", nvr_guid.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_NvrCamera_Data  nvr_camera_data;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        nvr_camera_data.CameraGuid = sqldata[index+1]? sqldata[index+1]: "";
        nvr_camera_data.CameraIP = sqldata[index+2]? sqldata[index+2]: "";
		nvr_camera_data.NvrGuid = sqldata[index+3]? sqldata[index+3]: "";
        v_data.push_back(nvr_camera_data);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}



/*
 * 设置一项配置参数（不存在则增加此名称的配置项，存在则修改）
 *
 * 参数
 * name：配置项名称
 * value：配置项值
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_configure_set(string name, string value)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;
	int count = 0;

	sprintf(sqlstr, "select count(*) from configure where ConfigureName='%s'", name.c_str());
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow == 1)
	{
		count = atoi(sqldata[1]? sqldata[1]: "0");
		memset(sqlstr, 0x00, sizeof(sqlstr));
		if(count >= 1)
		{
			sprintf(sqlstr, "update configure set ConfigureValue='%s' where ConfigureName='%s'", 
				value.c_str(), name.c_str());
		}else{
			sprintf(sqlstr, "insert into configure(ConfigureName,ConfigureValue) values ('%s','%s')", 
				name.c_str(), value.c_str());
		}
		rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
		if(rtn < 0)
		{
			DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
			return -1;
		}
	}
	else
	{
	    DBG("configure tabal date select count err\n");
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}
/*
 * 读取一项配置参数
 *
 * 参数
 * name：配置项名称
 * value：配置项值存储位置
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_configure_get(string name, string &value)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

	sprintf(sqlstr, "select ConfigureValue from configure where ConfigureName='%s'", name.c_str());
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        return -1;
    }
	if(nrow >= 1)
	{
		value = sqldata[1]? sqldata[1]: "";
	}
	else
	{
	    DBG("db_configure_get(name=\'%s\') is not exists", name.c_str());
		sqlite3_free_table_safe(sqldata);
		return -1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}
/*
 * 删除一项配置参数
 *
 * 参数
 * name：配置项名称
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_configure_del(string name)
{
	int rtn = 0;
	char sqlstr[256] = {0};

	snprintf(sqlstr,256,"delete from configure where ConfigureName='%s'",name.c_str());
	
	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0)
	{
		DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
		return -1;
	}

	return 0;
}

/*
 * 设置一项配置参数（不存在则增加此名称的配置项，存在则修改）
 *
 * 参数
 * group：配置所属组
 * key：配置项名称
 * value：配置项值
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_etc_config_set(const string &group, const string &key, const string &value)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;
	int count = 0;

	sprintf(sqlstr, "select count(*) from etc_config where kgroup='%s' and key='%s'", group.c_str(), key.c_str());
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0){
        ERR("%s db_file_exec_sql_table:%s Err", __FUNCTION__, sqlstr);
        sqlite3_free_table_safe(sqldata);
        return -1;
    }
	if(nrow == 1){
		count = atoi(sqldata[1]? sqldata[1]: "0");
		memset(sqlstr, 0x00, sizeof(sqlstr));
		if(count >= 1){
			sprintf(sqlstr, "update etc_config set value='%s' where kgroup='%s' and key='%s'",
				value.c_str(), group.c_str(), key.c_str());
		}else{
			sprintf(sqlstr, "insert into etc_config(kgroup,key,value) values ('%s', '%s','%s')",
					group.c_str(),key.c_str(), value.c_str());
		}
		rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
		if(rtn < 0){
			ERR("%s db_file_exec_sql:%s Err", __FUNCTION__, sqlstr);
			sqlite3_free_table_safe(sqldata);
			return -1;
		}
	}else{
	    ERR("%s etc_config tabal data select kgroup=%s key=%s count Err", __FUNCTION__,
	    		group.c_str(), key.c_str());
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}
/*
 * 读取一项配置参数
 *
 * 参数
 * group：配置所属组
 * key：配置项名称
 * value：配置项值存储位置
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_etc_config_get(const string &group, const string &key, string &value)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

    value.clear();

	sprintf(sqlstr, "select value from etc_config where kgroup='%s' and key='%s'", group.c_str(), key.c_str());
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0){
    	ERR("%s db_file_exec_sql_table:%s Err", __FUNCTION__, sqlstr);
    	sqlite3_free_table_safe(sqldata);
    	return -1;
    }if(nrow >= 1){
		value = sqldata[1]? sqldata[1]: "";
	}else{
	    DBG("%s kgroup=%s and key=%s is not exists", __FUNCTION__, group.c_str(), key.c_str());
		sqlite3_free_table_safe(sqldata);
		return -1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}
int db_etc_config_get(const string &group, const string &key, char *value)
{
	int rtn = 0;
	char sqlstr[256] = {0};
	char **sqldata;
    int nrow = 0;
    int ncol = 0;

	sprintf(sqlstr, "select value from etc_config where kgroup='%s' and key='%s'", group.c_str(), key.c_str());
	rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0){
    	ERR("%s db_file_exec_sql_table:%s Err", __FUNCTION__, sqlstr);
    	sqlite3_free_table_safe(sqldata);
    	return -1;
    }if(nrow >= 1){
    	if(sqldata[1]){
    		sprintf(value, "%s", sqldata[1]);
    	}
	}else{
	    DBG("%s kgroup=%s and key=%s is not exists", __FUNCTION__, group.c_str(), key.c_str());
		sqlite3_free_table_safe(sqldata);
		return -1;
	}
	sqlite3_free_table_safe(sqldata);

	return 0;
}
/*
 * 删除一项配置参数
 *
 * 参数
 * group：配置所属组
 * name：配置项名称
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_etc_config_del(const string &group, const string &key)
{
	int rtn = 0;
	char sqlstr[256] = {0};

	snprintf(sqlstr,256,"delete from etc_config where kgroup='%s' and key='%s'", group.c_str(), key.c_str());

	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0){
		ERR("%s db_file_exec_sql:%s Err", __FUNCTION__, sqlstr);
		return -1;
	}

	return 0;
}
/*
 ** 通过泊位号获取泊位停车状态
 ** berthNumber:泊位号  plateNumber:车牌号
 ** 返回值: 错误 -1，
 **         正确 驶入驶出类型 0出场，1入场
 **              2未找到该泊位记录
 */
int sq_select_park_state_by_berth(char *berthNumber, char *plateNumber)
{
    string state;
    int ret = db_configure_get(string(berthNumber) + "_count", state);
//    DBG("sq_select_park_state_by_berth:state = %s", state.c_str());
    if(ret == 0){
        char *ptr = NULL;
        char *p = NULL;
        char *str_tmp = (char*)malloc(strlen(state.c_str()) + 1);
        if(str_tmp == NULL){
            ERR("%s:malloc() Error", __FUNCTION__);
            return -1;
        }

        sprintf(str_tmp, "%s", state.c_str());
        sprintf(plateNumber, "%s", "");
        ptr = strtok_r(str_tmp, ",", &p);

        int index = 0;
        while(ptr != NULL){
            if(index == 0){
                ret = atoi(ptr);
            }else{
                strcat(plateNumber, ptr);
            }
            ptr = strtok_r(NULL, ",", &p);
            index++;
        }
        free(str_tmp);

        return (ret>0);
    }
    return 2;
}
/*
 * 获取流水延时（合并过滤）上报时间（min）
 *
 * 返回值：
 * 配置的流水延时上报时间（min），如果获取失败，默认5分钟
 * */
int db_get_business_delay_merge_time()
{
    DB_ParkingArea_Data data;
    if(db_parking_area_get_data(data) == 0){
        if(data.DelayedReportingParameter.size()){
            return atoi(data.DelayedReportingParameter.c_str());
        }
    }
    return 5;
}
/*
 * 获取蓝脑配置信息
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_get_blurbrain_conf(char *tcp_addr, char *tcp_port, char *image_addr, char *image_port)
{
    DB_ParkingLot_Data data;
    if(db_parking_lot_get_data(data) == 0){
        if(tcp_addr){
            sprintf(tcp_addr, "%s", data.BlueBrainInterfacePath.c_str());
        }
        if(tcp_port){
            sprintf(tcp_port, "%d", data.BlueBrainInterfacePort);
        }
        if(image_addr){
            sprintf(image_addr, "%s", data.BlueBrainPicPath.c_str());
        }
        if(image_port){
            sprintf(image_port, "%d", data.BlueBrainPicPort);
        }
        return 0;
    }
    return -1;
}

int db_camera_get_enable_full_camera(const std::string &common_camera_ip, std::string &full_camera_ip) {

    int rtn = 0;
    char sqlstr[256] = { 0 };
    char **sqldata;
    int nrow = 0;
    int ncol = 0;

    sprintf(sqlstr, "select CameraIP from TB_Camera where CameraType=2 and CameraArrayName = (select CameraArrayName from TB_Camera where CameraIP = '%s')", common_camera_ip.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0) {
        DBG("db_file_exec_sql_table:%s err.\n", sqlstr);
        return -1;
    }
    int i = 0;
    DB_Camera_Data camera_data;
    if (nrow) {
        full_camera_ip = sqldata[ncol] ? sqldata[ncol] : "0.0.0.0";
    }

    sqlite3_free_table_safe(sqldata);

    return 0;

}

//typedef struct{
//	string Guid;		//规则GUID
//	string PkRuleVersion;		//停车规则数据版本
//	string Name;		//规则名称
//
//	string StartDate;	//生效开始时间yyyyMMddHHmmss
//	string EndDate;	//生效结束时间yyyyMMddHHmmss
//	int LeadTimes;		//提前结束上报时长
//	int CycleType;		//周期类型1:每天,2:周一至周五,3:周末,4:自定义;
//	string CycleDetail;	//周期详情 2,3,4,5,6,7,1 分别对应周一到周日和java日期类枚举对应。多个用，分割; 示例:"CycleDetail": "2,6,4"
//	string PkRuleDurations;	//停车规则管理时段（json数组）
//
//	int SpecialDurationOperate;	//非管理时段操作 1. 抓拍、2. 不抓拍
//	int BlueBrainConfidence;	//蓝脑置信度
//	string PkRuleSpecialDurations;			//非管理日期yyyyMMdd（json数组）
//	string PkRuleSpaces;				//涉及的泊位（json数组）
//}tb_parking_rule_t;
/*
 * 向数据库增加一条停车规则
 *
 * 参数：
 * tb_parking_rule：停车规则结构体
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
//int db_parking_rule_add(tb_parking_rule_t tb_parking_rule)
//{
//	int ret = 0;
//	Estring<char> estr(2048);
//
//    if(estr.data == NULL){
//        ERR("%s estr.data == NULL", __FUNCTION__);
//        return -1;
//    }
//
//    snprintf(estr.data, estr.size, "insert into parking_rule(Guid,PkRuleVersion,Name,"
//    		"StartDate,EndDate,LeadTimes,CycleType,CycleDetail,PkRuleDurations,"
//    		"SpecialDurationOperate,BlueBrainConfidence,PkRuleSpecialDurations,PkRuleSpaces)"
//    		"values('%s','%s','%s',"
//    		"'%s','%s',%d,%d,'%s','%s',"
//    		"%d,%d,'%s','%s')",
//			tb_parking_rule.Guid.c_str(), tb_parking_rule.PkRuleVersion.c_str(), tb_parking_rule.Name.c_str(),
//			tb_parking_rule.StartDate.c_str(), tb_parking_rule.EndDate.c_str(), tb_parking_rule.LeadTimes, tb_parking_rule.CycleType, tb_parking_rule.CycleDetail.c_str(), tb_parking_rule.PkRuleDurations.c_str(),
//			tb_parking_rule.SpecialDurationOperate, tb_parking_rule.BlueBrainConfidence, tb_parking_rule.PkRuleSpecialDurations.c_str(), tb_parking_rule.PkRuleSpaces.c_str());
//    ret = db_file_exec_sql(roadeside_parking_db.db_file_path, estr.data, NULL, NULL);
//    if(ret < 0){
//    	ERR("%s db_file_exec_sql:%s Err", __FUNCTION__, estr.data);
//        return -1;
//    }
//	return ret;
//}
/*
 * 获取所以的停车管理规则
 *
 * 参数：
 * tb_parking_rule_array：获取结果存放位置（函数内部将会首先清楚此变量）
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_parking_rule_get(vector<tb_parking_rule_t> &tb_parking_rule_array)
{
	tb_parking_rule_array.clear();

    int rtn = 0;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    stringstream ss;
    ss << "select id,Guid,PkRuleVersion,Name,"
    		"StartDate,EndDate,LeadTimes,CycleType,CycleDetail,PkRuleDurations,"
    		"SpecialDurationOperate,BlueBrainConfidence,PkRuleSpecialDurations,PkRuleSpaces from parking_rule";

    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, (char *)ss.str().c_str(), &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n", ss.str().c_str());
        return -1;
    }
    int i = 0;
    for(i=0; i<nrow; i++)
    {
    	tb_parking_rule_t tb_parking_rule;
        index = ncol * (i+1);
        tb_parking_rule.Guid = (sqldata[index+1]? sqldata[index+1]: "");
        tb_parking_rule.PkRuleVersion = (sqldata[index+2]? sqldata[index+2]: "");
        tb_parking_rule.Name = (sqldata[index+3]? sqldata[index+3]: "");

        tb_parking_rule.StartDate = (sqldata[index+4]? sqldata[index+4]: "");
        tb_parking_rule.EndDate = (sqldata[index+5]? sqldata[index+5]: "");
        tb_parking_rule.LeadTimes = atoi(sqldata[index+6]? sqldata[index+6]: "0");
        tb_parking_rule.CycleType = atoi(sqldata[index+7]? sqldata[index+7]: "0");
        tb_parking_rule.CycleDetail = (sqldata[index+8]? sqldata[index+8]: "");
        tb_parking_rule.PkRuleDurations = (sqldata[index+9]? sqldata[index+9]: "");

        tb_parking_rule.SpecialDurationOperate = atoi(sqldata[index+10]? sqldata[index+10]: "0");
        tb_parking_rule.BlueBrainConfidence = atoi(sqldata[index+11]? sqldata[index+11]: "0");
        tb_parking_rule.PkRuleSpecialDurations = (sqldata[index+12]? sqldata[index+12]: "");
        tb_parking_rule.PkRuleSpaces = (sqldata[index+13]? sqldata[index+13]: "");

        tb_parking_rule_array.push_back(tb_parking_rule);
    }

    sqlite3_free_table_safe(sqldata);
    return 0;
}
int db_parking_rule_version_get(string &version)
{
	version = "";
    int rtn = 0;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    stringstream ss;
    ss << "select id,Guid,PkRuleVersion,Name,"
    		"StartDate,EndDate,LeadTimes,CycleType,CycleDetail,PkRuleDurations,"
    		"SpecialDurationOperate,BlueBrainConfidence,PkRuleSpecialDurations,PkRuleSpaces from parking_rule";

    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, (char *)ss.str().c_str(), &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n", ss.str().c_str());
        return -1;
    }
    int i = 0;
    for(i=0; i<nrow; i++)
    {
    	tb_parking_rule_t tb_parking_rule;
        index = ncol * (i+1);
        tb_parking_rule.Guid = (sqldata[index+1]? sqldata[index+1]: "");
        tb_parking_rule.PkRuleVersion = (sqldata[index+2]? sqldata[index+2]: "");
        tb_parking_rule.Name = (sqldata[index+3]? sqldata[index+3]: "");

        tb_parking_rule.StartDate = (sqldata[index+4]? sqldata[index+4]: "");
        tb_parking_rule.EndDate = (sqldata[index+5]? sqldata[index+5]: "");
        tb_parking_rule.LeadTimes = atoi(sqldata[index+6]? sqldata[index+6]: "0");
        tb_parking_rule.CycleType = atoi(sqldata[index+7]? sqldata[index+7]: "0");
        tb_parking_rule.CycleDetail = (sqldata[index+8]? sqldata[index+8]: "");
        tb_parking_rule.PkRuleDurations = (sqldata[index+9]? sqldata[index+9]: "");

        tb_parking_rule.SpecialDurationOperate = atoi(sqldata[index+10]? sqldata[index+10]: "0");
        tb_parking_rule.BlueBrainConfidence = atoi(sqldata[index+11]? sqldata[index+11]: "0");
        tb_parking_rule.PkRuleSpecialDurations = (sqldata[index+12]? sqldata[index+12]: "");
        tb_parking_rule.PkRuleSpaces = (sqldata[index+13]? sqldata[index+13]: "");

        version = tb_parking_rule.PkRuleVersion;
        break;
    }

    sqlite3_free_table_safe(sqldata);
    return 0;
}
//int db_parking_rule_delete_all()
//{
//	int ret = 0;
//	Estring<char> estr(128);
//
//    if(estr.data == NULL){
//        ERR("%s estr.data == NULL", __FUNCTION__);
//        return -1;
//    }
//
//    snprintf(estr.data, estr.size, "delete from parking_rule");
//    ret = db_file_exec_sql(roadeside_parking_db.db_file_path, estr.data, NULL, NULL);
//    if(ret < 0){
//    	ERR("%s db_file_exec_sql:%s Err", __FUNCTION__, estr.data);
//        return -1;
//    }
//	return ret;
//}
//typedef struct{
//	string Guid;		//规则GUID
//	string IllegalRuleVersion;		//停车规则数据版本
//	string Name;		//规则名称
//
//	string StartDate;	//生效开始时间yyyyMMddHHmmss
//	string EndDate;	//生效结束时间yyyyMMddHHmmss
//	string IllegalPkRuleCycles;	//停车规则管理时段（json数组）
//
//	int IsEnablePriority;
//	string PriorityStartDate;	//优先执行生效开始时间yyyyMMddHHmmss
//	string PriorityEndDate;		//优先执行生效结束时间yyyyMMddHHmmss
//	string IllegalPkRulePriorityDurations;	//优先执行停车规则管理时段（json数组）
//
//	int SpecialDurationOperate;	//非管理时段操作 1. 抓拍、2. 不抓拍
//	string PkRuleSpaces;				//涉及的泊位（json数组）
//}tb_illegal_parking_rule_t;
/*
 * 向数据库增加一条违停停车规则
 *
 * 参数：
 * tb_illegal_parking_rule：违停停车规则结构体
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_illegal_parking_rule_add(tb_illegal_parking_rule_t tb_illegal_parking_rule)
{
	int ret = 0;
#if 0
	Estring<char> estr(2048);

    if(estr.data == NULL){
        ERR("%s estr.data == NULL", __FUNCTION__);
        return -1;
    }

    snprintf(estr.data, estr.size, "insert into illegal_parking_rule(guid,version,name,"
    		"start_date,end_date,rule_duration,"
    		"first_execute_start_date,first_execute_end_date,first_execute_duration,"
    		"not_manage_time_capture,rule_space)"
    		"values('%s','%s','%s',"
    		"'%s','%s','%s',"
    		"'%s','%s','%s',"
    		"%d,'%s')",
			tb_illegal_parking_rule.Guid.c_str(), tb_illegal_parking_rule.PkRuleVersion.c_str(), tb_illegal_parking_rule.Name.c_str(),
			tb_illegal_parking_rule.StartDate.c_str(), tb_illegal_parking_rule.EndDate.c_str(), tb_illegal_parking_rule.PkRuleDurations.c_str(),
			tb_illegal_parking_rule.first_execute_start_date.c_str(), tb_illegal_parking_rule.first_execute_end_date.c_str(), tb_illegal_parking_rule.first_execute_rule_duration.c_str(),
			tb_illegal_parking_rule.SpecialDurationOperate, tb_illegal_parking_rule.PkRuleSpaces.c_str());
    ret = db_file_exec_sql(roadeside_parking_db.db_file_path, estr.data, NULL, NULL);
    if(ret < 0){
    	ERR("%s db_file_exec_sql:%s Err", __FUNCTION__, estr.data);
        return -1;
    }
#else
    stringstream ss;
    ss << "insert into illegal_parking_rule(";
    ss << "Guid,IllegalRuleVersion,Name,";
    ss << "StartDate,EndDate,IllegalPkRuleCycles,";
    ss << "IsEnablePriority,PriorityStartDate,PriorityEndDate,IllegalPkRulePriorityDurations,";
    ss << "SpecialDurationOperate,IllegalPkRuleSpaces";
    ss << ")values(";
    ss << SS(tb_illegal_parking_rule.Guid) << "," << SS(tb_illegal_parking_rule.IllegalRuleVersion) << "," << SS(tb_illegal_parking_rule.Name) << ",";
    ss << SS(tb_illegal_parking_rule.StartDate) << "," << SS(tb_illegal_parking_rule.EndDate) << "," << SS(tb_illegal_parking_rule.IllegalPkRuleCycles) << ",";
    ss << tb_illegal_parking_rule.IsEnablePriority<< "," << SS(tb_illegal_parking_rule.PriorityStartDate) << "," << SS(tb_illegal_parking_rule.PriorityEndDate) << "," << SS(tb_illegal_parking_rule.IllegalPkRulePriorityDurations) << ",";
    ss << tb_illegal_parking_rule.SpecialDurationOperate << "," << SS(tb_illegal_parking_rule.IllegalPkRuleSpaces);
    ss << ")";
//    DBG("ss=%s", ss.str().c_str());
    ret = db_file_exec_sql(roadeside_parking_db.db_file_path, (char *)ss.str().c_str(), NULL, NULL);
    if(ret < 0){
    	ERR("%s db_file_exec_sql:%s Err", __FUNCTION__, ss.str().c_str());
        return -1;
    }
#endif
	return ret;
}
/*
 * 违停规则获取
 *
 * 参数：
 * tb_illegal_parking_rule_array：获取结果存放位置（函数内部将会首先清楚此变量）
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_illegal_parking_rule_get(vector<tb_illegal_parking_rule_t> &tb_illegal_parking_rule_array)
{
	tb_illegal_parking_rule_array.clear();

    int rtn = 0;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    stringstream ss;
    ss << "select id,Guid,IllegalRuleVersion,Name,"
    		"StartDate,EndDate,IllegalPkRuleCycles,"
    		"IsEnablePriority,PriorityStartDate,PriorityEndDate,IllegalPkRulePriorityDurations,"
    		"SpecialDurationOperate,IllegalPkRuleSpaces from illegal_parking_rule";

    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, (char *)ss.str().c_str(), &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n", ss.str().c_str());
        return -1;
    }
    int i = 0;
    for(i=0; i<nrow; i++)
    {
    	tb_illegal_parking_rule_t tb_illegal_parking_rule;
        index = ncol * (i+1);
        tb_illegal_parking_rule.Guid = (sqldata[index+1]? sqldata[index+1]: "");
        tb_illegal_parking_rule.IllegalRuleVersion = (sqldata[index+2]? sqldata[index+2]: "");
        tb_illegal_parking_rule.Name = (sqldata[index+3]? sqldata[index+3]: "");

        tb_illegal_parking_rule.StartDate = (sqldata[index+4]? sqldata[index+4]: "");
        tb_illegal_parking_rule.EndDate = (sqldata[index+5]? sqldata[index+5]: "");
        tb_illegal_parking_rule.IllegalPkRuleCycles = (sqldata[index+6]? sqldata[index+6]: "");

        tb_illegal_parking_rule.IsEnablePriority = atoi(sqldata[index+7]? sqldata[index+7]: "0");
        tb_illegal_parking_rule.PriorityStartDate = (sqldata[index+8]? sqldata[index+8]: "");
        tb_illegal_parking_rule.PriorityEndDate = (sqldata[index+9]? sqldata[index+9]: "");
        tb_illegal_parking_rule.IllegalPkRulePriorityDurations = (sqldata[index+10]? sqldata[index+10]: "");

        tb_illegal_parking_rule.SpecialDurationOperate = atoi(sqldata[index+11]? sqldata[index+11]: "0");
		tb_illegal_parking_rule.IllegalPkRuleSpaces = (sqldata[index+12]? sqldata[index+12]: "");

        tb_illegal_parking_rule_array.push_back(tb_illegal_parking_rule);
    }

    sqlite3_free_table_safe(sqldata);
    return 0;
}
int db_illegal_parking_rule_version_get(string &version)
{
	version = "";
    int rtn = 0;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    stringstream ss;
    ss << "select id,Guid,IllegalRuleVersion,Name,"
    		"StartDate,EndDate,IllegalPkRuleCycles,"
    		"IsEnablePriority,PriorityStartDate,PriorityEndDate,IllegalPkRulePriorityDurations,"
    		"SpecialDurationOperate,IllegalPkRuleSpaces from illegal_parking_rule";

    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, (char *)ss.str().c_str(), &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n", ss.str().c_str());
        return -1;
    }
    int i = 0;
    for(i=0; i<nrow; i++)
    {
    	tb_illegal_parking_rule_t tb_illegal_parking_rule;
        index = ncol * (i+1);
        tb_illegal_parking_rule.Guid = (sqldata[index+1]? sqldata[index+1]: "");
        tb_illegal_parking_rule.IllegalRuleVersion = (sqldata[index+2]? sqldata[index+2]: "");
        tb_illegal_parking_rule.Name = (sqldata[index+3]? sqldata[index+3]: "");

        tb_illegal_parking_rule.StartDate = (sqldata[index+4]? sqldata[index+4]: "");
        tb_illegal_parking_rule.EndDate = (sqldata[index+5]? sqldata[index+5]: "");
        tb_illegal_parking_rule.IllegalPkRuleCycles = (sqldata[index+6]? sqldata[index+6]: "");

        tb_illegal_parking_rule.IsEnablePriority = atoi(sqldata[index+7]? sqldata[index+7]: "0");
        tb_illegal_parking_rule.PriorityStartDate = (sqldata[index+8]? sqldata[index+8]: "");
        tb_illegal_parking_rule.PriorityEndDate = (sqldata[index+9]? sqldata[index+9]: "");
        tb_illegal_parking_rule.IllegalPkRulePriorityDurations = (sqldata[index+10]? sqldata[index+10]: "");

        tb_illegal_parking_rule.SpecialDurationOperate = atoi(sqldata[index+11]? sqldata[index+11]: "0");
		tb_illegal_parking_rule.IllegalPkRuleSpaces = (sqldata[index+12]? sqldata[index+12]: "");

		version = tb_illegal_parking_rule.IllegalRuleVersion;
		break;
    }

    sqlite3_free_table_safe(sqldata);
    return 0;
}
//int db_illegal_parking_rule_delete_all()
//{
//	int ret = 0;
//	Estring<char> estr(128);
//
//    if(estr.data == NULL){
//        ERR("%s estr.data == NULL", __FUNCTION__);
//        return -1;
//    }
//
//    snprintf(estr.data, estr.size, "delete from illegal_parking_rule");
//    ret = db_file_exec_sql(roadeside_parking_db.db_file_path, estr.data, NULL, NULL);
//    if(ret < 0){
//    	ERR("%s db_file_exec_sql:%s Err", __FUNCTION__, estr.data);
//        return -1;
//    }
//	return ret;
//}

int db_detection_relevancy_del()
{
    int rtn = 0;
    char sqlstr[256] = {0};

    sprintf(sqlstr,"delete from detection_relevancy");
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        return -1;
    }

    return 0;
}
int db_detection_relevancy_add(DB_DetectionRelevancy_t &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);

    snprintf(sqlstr,1024,"insert into detection_relevancy("
            "SpaceGuid,SpaceName,SpaceType,DestSpaceGuid,DestSpaceName,DestSpaceType,"
            "DestSpacePlatid,DestPklPlatId,DestEquipmentName"
            ") values('%s','%s',%d,'%s','%s',%d,'%s','%s','%s')",
            data.SpaceGuid.c_str(), data.SpaceName.c_str(),data.SpaceType,
            data.DestSpaceGuid.c_str(), data.DestSpaceName.c_str(), data.DestSpaceType, 
            data.DestSpacePlatid.c_str(),data.DestPklPlatId.c_str(),data.DestEquipmentName.c_str());
	DBG("sqlstr:%s", sqlstr);
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}
int db_detection_relevancy_get_all(vector<DB_DetectionRelevancy_t> &v_data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(256);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 256);
    snprintf(sqlstr, 256, "select id,SpaceGuid,SpaceName,SpaceType,DestSpaceGuid,DestSpaceName,DestSpaceType,"
						"DestSpacePlatid,DestPklPlatId,DestEquipmentName from detection_relevancy");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_DetectionRelevancy_t  detect_relevancy_data;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        detect_relevancy_data.SpaceGuid = sqldata[index+1]? sqldata[index+1]: "";
        detect_relevancy_data.SpaceName = sqldata[index+2]? sqldata[index+2]: "";
		detect_relevancy_data.SpaceType = atoi(sqldata[index+3]? sqldata[index+3]: "0");
		detect_relevancy_data.DestSpaceGuid = sqldata[index+4]? sqldata[index+4]: "";
        detect_relevancy_data.DestSpaceName = sqldata[index+5]? sqldata[index+5]: "";
		detect_relevancy_data.DestSpaceType = atoi(sqldata[index+6]? sqldata[index+6]: "0");
		detect_relevancy_data.DestSpacePlatid = sqldata[index+7]? sqldata[index+7]: "";
        detect_relevancy_data.DestPklPlatId = sqldata[index+8]? sqldata[index+8]: "";
		detect_relevancy_data.DestEquipmentName = sqldata[index+9]? sqldata[index+9]: "";

        v_data.push_back(detect_relevancy_data);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}
//通过泊位guid查找是否有侦测关联信息
//返回值：0，无相关联泊位；1，有关联泊位
int db_get_relevancy_by_space_guid(char *space_guid, vector<DB_DetectionRelevancy_t> &v_data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(256);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 256);
    snprintf(sqlstr, 256, "select id,SpaceGuid,SpaceName,SpaceType,DestSpaceGuid,DestSpaceName,DestSpaceType,"
						"DestSpacePlatid,DestPklPlatId,DestEquipmentName from detection_relevancy where SpaceGuid='%s'",
						space_guid);
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_DetectionRelevancy_t  detect_relevancy_data;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        detect_relevancy_data.SpaceGuid = sqldata[index+1]? sqldata[index+1]: "";
        detect_relevancy_data.SpaceName = sqldata[index+2]? sqldata[index+2]: "";
		detect_relevancy_data.SpaceType = atoi(sqldata[index+3]? sqldata[index+3]: "0");
		detect_relevancy_data.DestSpaceGuid = sqldata[index+4]? sqldata[index+4]: "";
        detect_relevancy_data.DestSpaceName = sqldata[index+5]? sqldata[index+5]: "";
		detect_relevancy_data.DestSpaceType = atoi(sqldata[index+6]? sqldata[index+6]: "0");
		detect_relevancy_data.DestSpacePlatid = sqldata[index+7]? sqldata[index+7]: "";
        detect_relevancy_data.DestPklPlatId = sqldata[index+8]? sqldata[index+8]: "";
		detect_relevancy_data.DestEquipmentName = sqldata[index+9]? sqldata[index+9]: "";

        v_data.push_back(detect_relevancy_data);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return nrow;
}

int db_illegal_parking_set_delete()
{
	int rtn = 0;
	char sqlstr[256] = {0};

	sprintf(sqlstr,"delete from illegal_parking_set");
	
	rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
	if(rtn < 0)
	{
		DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
		return -1;
	}

	return 0;
}

int db_illegal_parking_set_insert(DB_illegal_parking_set_t &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    snprintf(sqlstr,1024,"insert into illegal_parking_set("
			"WtIs4GTransmission,WtOutIsTestDate,WtOutDelayUploadTime,WtOutCloseUpPic,WtInIsParking,"
			"WtInIsBlueBrain,WtInIsParkingInSmallVideo,WtInIsParkingInGif,"
			"WtInIsParkingOutSmallVideo,WtInIsParkingOutGif,WtInIsSpaceInspectionPic,"
			"WtInInspectionWay,WtInEventInterval,WtInNoEventInterval,WtInIsInPanoramaspectionPic,"
			"WtInPanoramaspectionPicInterval,WtInNonStandardBehaviorReverse,"
			"WtInNonStandardBehaviorCrossSpace,WtInNonStandardBehaviorLinePressing,"
			"WtInNoLicensePlateDefault,WtInIsPrintParkinglotName,WtInAllowParkingTime,"
			"WtInSoonOverTimeEarlyWarning,WtInOverTimeRemind,WtInIsWtEvidence,WtInCloseUpPic,"
			"WtInIsLicensePlateShieldedUploadVideo,WtInIsIllegalParkingInSmallVideo,"
			"WtInIsIllegalParkingOutSmallVideo"	
            ") values("
            "%d,%d,%d,'%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,'%s',"
            "%d,%d,%d,%d,%d,'%s',%d,%d,%d)",
            data.WtIs4GTransmission, data.WtOutIsTestDate, data.WtOutDelayUploadTime,
            data.WtOutCloseUpPic.c_str(), data.WtInIsParking, data.WtInIsBlueBrain,
            data.WtInIsParkingInSmallVideo, data.WtInIsParkingInGif, data.WtInIsParkingOutSmallVideo,
            data.WtInIsParkingOutGif, data.WtInIsSpaceInspectionPic, data.WtInInspectionWay,
            data.WtInEventInterval, data.WtInNoEventInterval, data.WtInIsInPanoramaspectionPic,
            data.WtInPanoramaspectionPicInterval, data.WtInNonStandardBehaviorReverse, 
            data.WtInNonStandardBehaviorCrossSpace, data.WtInNonStandardBehaviorLinePressing, 
            data.WtInNoLicensePlateDefault.c_str(), data.WtInIsPrintParkinglotName,
            data.WtInAllowParkingTime, data.WtInSoonOverTimeEarlyWarning, data.WtInOverTimeRemind,
            data.WtInIsWtEvidence, data.WtInCloseUpPic.c_str(), data.WtInIsLicensePlateShieldedUploadVideo,
            data.WtInIsIllegalParkingInSmallVideo, data.WtInIsIllegalParkingOutSmallVideo);
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;
}

/*
 * 获取illegal_parking_set的数据（取最小id一条数据）
 *
 * 0：成功
 * -1：失败
 * */
int db_illegal_parking_set_get(DB_illegal_parking_set_t& data)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    snprintf(sqlstr, 1024, "select WtIs4GTransmission,WtOutIsTestDate,WtOutDelayUploadTime,WtOutCloseUpPic,"
				"WtInIsParking,WtInIsBlueBrain,WtInIsParkingInSmallVideo,WtInIsParkingInGif,"
				"WtInIsParkingOutSmallVideo,WtInIsParkingOutGif,WtInIsSpaceInspectionPic,"
				"WtInInspectionWay,WtInEventInterval,WtInNoEventInterval,WtInIsInPanoramaspectionPic,"
				"WtInPanoramaspectionPicInterval,WtInNonStandardBehaviorReverse,"
				"WtInNonStandardBehaviorCrossSpace,WtInNonStandardBehaviorLinePressing,"
				"WtInNoLicensePlateDefault,WtInIsPrintParkinglotName,WtInAllowParkingTime,"
				"WtInSoonOverTimeEarlyWarning,WtInOverTimeRemind,WtInIsWtEvidence,WtInCloseUpPic,"
				"WtInIsLicensePlateShieldedUploadVideo,WtInIsIllegalParkingInSmallVideo,"
				"WtInIsIllegalParkingOutSmallVideo "
                "from illegal_parking_set limit 1");
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    if(nrow == 1)
    {
		data.WtIs4GTransmission = atoi(sqldata[ncol+0]? sqldata[ncol+0]: "0");
		data.WtOutIsTestDate = atoi(sqldata[ncol+1]? sqldata[ncol+1]: "0");
		data.WtOutDelayUploadTime = atoi(sqldata[ncol+2]? sqldata[ncol+2]: "0");
		data.WtOutCloseUpPic = sqldata[ncol+3]? sqldata[ncol+3]: "";
		data.WtInIsParking = atoi(sqldata[ncol+4]? sqldata[ncol+4]: "0");
		data.WtInIsBlueBrain = atoi(sqldata[ncol+5]? sqldata[ncol+5]: "0");
		data.WtInIsParkingInSmallVideo = atoi(sqldata[ncol+6]? sqldata[ncol+6]: "0");
		data.WtInIsParkingInGif = atoi(sqldata[ncol+7]? sqldata[ncol+7]: "0");
		data.WtInIsParkingOutSmallVideo = atoi(sqldata[ncol+8]? sqldata[ncol+8]: "0");
		data.WtInIsParkingOutGif = atoi(sqldata[ncol+9]? sqldata[ncol+9]: "0");
		data.WtInIsSpaceInspectionPic = atoi(sqldata[ncol+10]? sqldata[ncol+0]: "0");
		data.WtInInspectionWay = atoi(sqldata[ncol+11]? sqldata[ncol+11]: "0");
		data.WtInEventInterval = atoi(sqldata[ncol+12]? sqldata[ncol+12]: "0");
		data.WtInNoEventInterval = atoi(sqldata[ncol+13]? sqldata[ncol+13]: "0");
		data.WtInIsInPanoramaspectionPic = atoi(sqldata[ncol+14]? sqldata[ncol+14]: "0");
		data.WtInPanoramaspectionPicInterval = atoi(sqldata[ncol+15]? sqldata[ncol+15]: "0");
		data.WtInNonStandardBehaviorReverse = atoi(sqldata[ncol+16]? sqldata[ncol+16]: "0");
		data.WtInNonStandardBehaviorCrossSpace = atoi(sqldata[ncol+17]? sqldata[ncol+17]: "0");
		data.WtInNonStandardBehaviorLinePressing = atoi(sqldata[ncol+18]? sqldata[ncol+18]: "0");
		data.WtInNoLicensePlateDefault = sqldata[ncol+19]? sqldata[ncol+19]: "";
		data.WtInIsPrintParkinglotName = atoi(sqldata[ncol+20]? sqldata[ncol+20]: "0");
		data.WtInAllowParkingTime = atoi(sqldata[ncol+21]? sqldata[ncol+21]: "0");
		data.WtInSoonOverTimeEarlyWarning = atoi(sqldata[ncol+22]? sqldata[ncol+22]: "0");
		data.WtInOverTimeRemind = atoi(sqldata[ncol+23]? sqldata[ncol+23]: "0");
		data.WtInIsWtEvidence = atoi(sqldata[ncol+24]? sqldata[ncol+24]: "0");
		data.WtInCloseUpPic = sqldata[ncol+25]? sqldata[ncol+25]: "";
		data.WtInIsLicensePlateShieldedUploadVideo = atoi(sqldata[ncol+26]? sqldata[ncol+26]: "0");
		data.WtInIsIllegalParkingInSmallVideo = atoi(sqldata[ncol+27]? sqldata[ncol+27]: "0");
		data.WtInIsIllegalParkingOutSmallVideo = atoi(sqldata[ncol+28]? sqldata[ncol+28]: "0");	
    }
    else
    {
        DBG("illegal_parking_set tabal date count err\n");
        sqlite3_free_table_safe(sqldata);
        free(sqlstr);
        return 1;
    }
    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return rtn; 
}

//视频桩
int db_video_pole_delete_all()
{
    int rtn = 0;
    char sqlstr[256] = {0};

    sprintf(sqlstr,"delete from VideoPole");
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        return -1;
    }

    return 0;
}
int db_video_pole_insert(DB_VideoPole_t &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(512);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 512);

    snprintf(sqlstr,512,"insert into VideoPole("
            "Guid,PlatID,Name) values('%s','%s','%s')",
            data.Guid.c_str(), data.PlatID.c_str(),data.Name.c_str());
    
    rtn = db_file_exec_sql(roadeside_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}
int db_video_pole_get_by_guid(vector<DB_VideoPole_t> &v_data, string guid)
{
    int rtn = 0;
    char *sqlstr;
    char **sqldata;
    int nrow = 0;
    int ncol = 0;
    int index = 0;

    sqlstr = (char *)malloc(256);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 256);
    sprintf(sqlstr, "select ID,Guid,PlatID,Name from VideoPole where Guid='%s'", guid.c_str());
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.\n",sqlstr);
        free(sqlstr);
        return -1;
    }
    int i = 0;
    DB_VideoPole_t data;
    for(i=0; i<nrow; i++)
    {
        index = ncol * (i+1);
        data.Guid = sqldata[index+1]? sqldata[index+1]: "";
        data.PlatID = sqldata[index+2]? sqldata[index+2]: "";
		data.Name = sqldata[index+3]? sqldata[index+3]: "";
        v_data.push_back(data);
    }

    sqlite3_free_table_safe(sqldata);
    free(sqlstr);
    return 0;
}

void db_test()
{
	int ret = 0;
#if 0
	tb_parking_rule_t tb_parking_rule;
	tb_parking_rule.Guid = "guid";
	tb_parking_rule.PkRuleVersion = "version";
	tb_parking_rule.Name = "name";

	tb_parking_rule.StartDate = "20200720";
	tb_parking_rule.EndDate = "202020910";
	tb_parking_rule.LeadTimes = 30;
	tb_parking_rule.CycleType = 4;
	tb_parking_rule.CycleDetail = "2,5,6";
	tb_parking_rule.PkRuleDurations = "[{\"start\":\"190000\",\"end\":\"070000\"},{\"start\":\"120000\",\"end\":\"130000\"}]";

	tb_parking_rule.SpecialDurationOperate = 1;
	tb_parking_rule.BlueBrainConfidence = 30;
	tb_parking_rule.PkRuleSpecialDurations = "[\"20200103\", \"20200205\", \"20201001\"]";
	tb_parking_rule.PkRuleSpaces = "[\"b103\", \"b205\", \"b002\"]";

	ret = db_parking_rule_add(tb_parking_rule);
	DBG("db_parking_rule_add ret=%d", ret);
#endif
#if 0
	tb_illegal_parking_rule_t tb_illegal_parking_rule;
	tb_illegal_parking_rule.Guid = "guid";
	tb_illegal_parking_rule.IllegalRuleVersion = "version";
	tb_illegal_parking_rule.Name = "name";

	tb_illegal_parking_rule.StartDate = "20200800";
	tb_illegal_parking_rule.EndDate = "20200900";
	tb_illegal_parking_rule.IllegalPkRuleCycles= "[{\"cycle_detail\":\"1,2,3\",\"duration\":[{\"start\":\"080000\",\"end\":\"110000\"},{\"start\":\"120000\",\"end\":\"180000\"}]},{\"cycle_detail\":\"4,5,6,7\",\"duration\":[{\"start\":\"090000\",\"end\":\"110000\"},{\"start\":\"140000\",\"end\":\"180000\"}]}]";

	tb_illegal_parking_rule.PriorityStartDate = "20200800";
	tb_illegal_parking_rule.PriorityEndDate = "20200900";
	tb_illegal_parking_rule.IllegalPkRulePriorityDurations = "[{\"start\":\"190000\",\"end\":\"070000\"},{\"start\":\"120000\",\"end\":\"130000\"}]";

	tb_illegal_parking_rule.SpecialDurationOperate = 1;
	tb_illegal_parking_rule.IllegalPkRuleSpaces = "[\"wb103\", \"wb205\", \"wb002\"]";

	ret = db_illegal_parking_rule_add(tb_illegal_parking_rule);
	DBG("db_illegal_parking_rule_add ret=%d", ret);
#endif
#if 0
	ret = db_parking_space_set_light_influence("DXLJ00039", 1);
	DBG("db_parking_space_set_light_influence ret=%d", ret);
	ret = db_parking_space_set_light_influence("DXLJ00039", 2);
	DBG("db_parking_space_set_light_influence ret=%d", ret);
	ret = db_parking_space_set_light_influence("DXLJ00040", 3);
	DBG("db_parking_space_set_light_influence ret=%d", ret);
	ret = db_parking_space_set_light_influence("DXLJ00041", 1);
	DBG("db_parking_space_set_light_influence ret=%d", ret);
	ret = db_parking_space_set_light_influence("DXLJ00041", 2);
	DBG("db_parking_space_set_light_influence ret=%d", ret);
	ret = db_parking_space_set_light_influence("DXLJ00039", 3);
	DBG("db_parking_space_set_light_influence ret=%d", ret);
	ret = db_parking_space_set_light_influence("DXLJ00039", 1);
	DBG("db_parking_space_set_light_influence ret=%d", ret);
	ret = db_parking_space_set_light_influence("DXLJ00039", 2);
	DBG("db_parking_space_set_light_influence ret=%d", ret);
#endif
}
/*
 * 数据库配置最终的初始化
 *
 * 返回值：
 * 0：成功
 * -1：失败
 * */
int db_last_init()
{
	int ret = 0;
	ret = dbt_check(roadeside_parking_db.db_file_path, parking_rule_table, sizeof(parking_rule_table)/sizeof(DBT_Table));
	if(ret != 0){
		ERR("%s dbt_check parking_rule_table Err,return -1", __FUNCTION__);
		return -1;
	}
	ret = dbt_check(roadeside_parking_db.db_file_path, illegal_parking_rule_table, sizeof(illegal_parking_rule_table)/sizeof(DBT_Table));
	if(ret != 0){
		ERR("%s dbt_check illegal_parking_rule_table Err,return -1", __FUNCTION__);
		return -1;
	}
	ret = dbt_check(roadeside_parking_db.db_file_path, detection_relevancy_table, sizeof(detection_relevancy_table)/sizeof(DBT_Table));
	if(ret != 0){
		ERR("%s dbt_check detection_relevancy_table Err,return -1", __FUNCTION__);
		return -1;
	}
	
	ret = dbt_check(roadeside_parking_db.db_file_path, illegal_parking_set_table, sizeof(illegal_parking_set_table)/sizeof(DBT_Table));
	if(ret != 0){
		ERR("%s dbt_check illegal_parking_set_table Err,return -1", __FUNCTION__);
		return -1;
	}

	return ret;
}

/*通过相机guid获取相机名*/
int db_camera_get_name(const char *camera_guid,string &camera_name,string &cametype)
{
    int rtn = 0;
    char sqlstr[256] = {0};
    char **sqldata;
    int nrow = 0;
    int ncol = 0;

    if(!camera_guid)
    {
        ERR("[db_camera_get_ip] camera_guid empty");
        return -1;
    }

    sprintf(sqlstr, "select CameraName,CameraType from TB_Camera where Guid='%s'", camera_guid);
    rtn = db_file_exec_sql_table(roadeside_parking_db.db_file_path, sqlstr, &sqldata, &nrow, &ncol);
    if (rtn < 0)
    {
        DBG("db_file_exec_sql_table:%s err.",sqlstr);
        return -1;
    }
    if(nrow == 1)
    {
        camera_name = sqldata[1]? sqldata[1]: "";   /*相机名称*/
        cametype    = sqldata[2]? sqldata[2]: "";   /*相机类型*/
    }
    else
    {
        ERR("TB_Camera tabal date select count err");
        sqlite3_free_table_safe(sqldata);
        return 1;
    }
    sqlite3_free_table_safe(sqldata);

    return 0;   
}
//更新~/bin/RoadsideParking.db下eoc服务器地址和文件服务器地址
int bin_parking_lot_update_eocpath(DB_ParkingLot_Data &data)
{
    int rtn = 0;
    char *sqlstr;

    sqlstr = (char *)malloc(1024);
    if (sqlstr == NULL)
    {
        ERR("申请内存失败");
        return -1;
    }
    memset(sqlstr, 0x0, 1024);
    snprintf(sqlstr,1024,"update TB_ParkingLot set CloudServerPath='%s',"
            "TransferServicePath='%s',CloudServerPort=%d,FileServicePort=%d",
            data.CloudServerPath.c_str(), data.TransferServicePath.c_str(),data.CloudServerPort, 
            data.FileServicePort);
    
    rtn = db_file_exec_sql(factory_parking_db.db_file_path, sqlstr, NULL, NULL);
    if(rtn < 0)
    {
        DBG("db_file_exec_sql err.sqlstr:%s\n", sqlstr);
        free(sqlstr);
        return -1;
    }

    free(sqlstr);
    return 0;

}


int eoc_db_init()
{
    db_table_init_if_not_exists();
    db_conf_init_if_not_exists();
    int ret = db_last_init();
    if(ret != 0){
        ERR("db_last_init() Err");
		printf("db_last_init() Err");
        exit(0);
    }

}



